require "colorize"
require "option_parser"
require "./drizzle/*"

# Drizzle is a (currently interpreted, eventually compiled) programming language that tries to strike a balance between readability and type safety, with a bit of speed thrown into the mix.
#
# Please bear in mind that these docs are generated by running `crystal docs` on the source of the interpreter / compiler.
# As a result, these docs are intended for the people who wish to contribute to the implemenation of the language.
#
# For usage documentation, please see [here](drizzle-lang.github.io/drizzle) instead.
module Drizzle
  # TODO: Put your code here
end

# Option Vars
help = false

# Message Vars
header = "#{"drizzle".colorize(:blue)} version #{Drizzle::VERSION}\n"
help_text = "

Usage:
  drizzle [options] [file]
    If a file is supplied, interpret the contents of the file.
      For now, this just lexes the file and prints out all its tokens.
    If no file is supplied, a REPL environment will be initialized instead.

  Options:"

options = OptionParser.new
options.banner = "#{header}#{help_text}"
options.on("-h", "--help", "Show this help message") { help = true }

# Entrypoints

# REPL env if nothing is passed
if ARGV.size == 0
  puts header
  Drizzle::REPL.new
else
  # Parse options and do stuff
  options.parse!

  # Print help?
  if help
    puts options
  else
    # If no help, try and get a file name
    file = ARGV[-1]
    begin
      lexer = Drizzle::Lexer.new File.open file
      token : Drizzle::Token
      while !(token = lexer.get_next_token).token_type.eof?
        puts token.to_s
      end
    rescue
      puts "File #{file} could not be read.".colorize(:red)
    end
  end
end
