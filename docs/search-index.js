crystal_doc_search_index_callback({"repository_name":"github.com/drizzle-lang/drizzle","body":"# Drizzle\n\nDrizzle is my very own programming language, simultaneously developed as a language I would like to use and a never-ending source of things to learn.\n\n## Name\nThis project was originally called *Sapphire*.\nI decided to make an organisation for this project as it would surely consist of multiple projects and I really enjoy having projects grouped into Organisations.\n\nHowever, when I tried to do so, I found that `sapphire` and `sapphire-lang` were both taken in terms of names, and there were a few programming language projects named *Sapphire* on GitHub.\nSo I felt I needed to change the name.\n\nBeing a fan of Pokémon, my first thought was *Kyogre*, the legendary from Pokémon Sapphire.\nFrom there I thought of his ability *Drizzle*, which I thought was a nice name for my language considering I also love rain, so there you go!\n\n(Also I already had made stickers of the logo so I had to stick with blue and stuff >.>)\n\n## Goals\nThe goals of the project are (in some particular order):\n- Create a language with a nice syntax that I would like to use.\n- Constantly learn ways to improve the language.\n- Learn about the kind of work that goes into developing production grade languages.\n- Eventually get Drizzle to the point where it can interpret / compile itself.\n\n## Extensions\nSome basic extensions that I would like to see built in to the language itself;\n- `drizzle docs`: Similar to how crystal generates documentation I would like to have Drizzle being able to parse code and generate doc pages\n- `drizzle fmt`: Similar to tools like `gofmt` or `crystal tool format`, I would like it for Drizzle to have a built-in formatter (once we have a style guide in place)\n- `drizzle drops`: When the language starts to grow, we would need to have some kind of dependency manager built in. Dependencies will be called `drops`\n- `drizzle playground`: Seems to be a common thing nowadays, so drizzle could do with one\n\n## Roadmap\nHere's a basic roadmap for anyone who is interested in what's going on with this project;\n\n- [ ] Interpreter written in Crystal (using https://interpreterbook.com)\n    - [x] Chapter 1 (Lexing)\n    - [x] Chapter 2 (Parsing)\n    - [ ] Chapter 3 (Evaluating)\n    - [ ] Chapter 4 (Extending the Interpreter)\n- [ ] Minor Extras before improving the language again\n    - [ ] Move docs to using [Gitbook](https://www.gitbook.com/?t=2) and make it more in depth / finalize initial languge design\n    - [ ] Improve the syntax definition file and convert it into .tmLanguage\n    - [ ] Extend interpreter so that initial design works\n    - [ ] Do a simple POC project in Drizzle to show that it does actually work\n- [ ] ANTLR Generated Parser\n    - [ ] Write (E)BNF notation for Drizzle\n    - [ ] Ensure the generated Parser works as intended\n    - [ ] Convert parser to Crystal (probably from Go or Python)\n        - Alternatively, look at writing a Crystal generator for ANTLR to avoid this step\n- [ ] Compiler written in Crystal (using https://compilerbook.com)\n    - [ ] Chapter  1 (Compilers & VMs)\n    - [ ] Chapter  2 (Hello Bytecode)\n    - [ ] Chapter  3 (Compiling Expressions)\n    - [ ] Chapter  4 (Conditionals)\n    - [ ] Chapter  5 (Keeping Track of Names)\n    - [ ] Chapter  6 (String, Array and Hash)\n    - [ ] Chapter  7 (Functions)\n    - [ ] Chapter  8 (Built-in Functions)\n    - [ ] Chapter  9 (Closures)\n    - [ ] Chapter 10 (Taking Time)\n- [ ] Plans for after in no particular order;\n    - [ ] Self host the interpreter\n    - [ ] Self host the compiler\n    - [ ] Move the compiler to LLVM\n    - [ ] Add on extra tools\n    - [ ] Extend the drizzle stdlib\n    - [ ] Give repositories for installation instead of doing it from source with Crystal\n    - [ ] Interpreter Book Lost Chapter (Macro System) (I had no initial plans to do this so I'll see)\n\n### Notes\n- It would be nice if the project could maintain a side-by-side interpreter and compiler so that drizzle could have a fully functional REPL environment built into the language, or maybe provide drizzle-interpreter as a separate package or something idk\n- The more I go through the interpreter book, the more I realise that translating the ANTLR parser every time I add something new might not be worth the hassle.\n    - However, if I can do it in a smart way, I should only have to translate the whole thing once, and figure out how to add stuff manually going forward in the same style to keep the benefits\n\n## Contributing\nThis project is open to anyone who wants to learn anything about creating programming languages!\n\nA goal for early stages is to keep documentation at a high enough quality that it will hopefully be easy to follow what's going on, but if not then please open an issue!\n\n### Contributors\n- [crnbrdrck](https://github.com/crnbrdrck): creator, designer, maintainer\n","program":{"html_id":"github.com/drizzle-lang/drizzle/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/drizzle-lang/drizzle","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[{"id":"add_infix(token_type,method_name)-macro","html_id":"add_infix(token_type,method_name)-macro","name":"add_infix","doc":"Register an infix parser for a given token and method name","summary":"<p>Register an infix parser for a given token and method name</p>","abstract":false,"args":[{"name":"token_type","doc":null,"default_value":"","external_name":"token_type","restriction":""},{"name":"method_name","doc":null,"default_value":"","external_name":"method_name","restriction":""}],"args_string":"(token_type, method_name)","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L15","def":{"name":"add_infix","args":[{"name":"token_type","doc":null,"default_value":"","external_name":"token_type","restriction":""},{"name":"method_name","doc":null,"default_value":"","external_name":"method_name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"  self.register_infix TokenType::\n{{ token_type }}\n, ->(\nexp : AST::Expression)\n{ self.\n{{ method_name }}\n(\nexp).as(AST::Expression) }\n\n"}},{"id":"add_prefix(token_type,method_name)-macro","html_id":"add_prefix(token_type,method_name)-macro","name":"add_prefix","doc":"Register a prefix parser for a given token and method name","summary":"<p>Register a prefix parser for a given token and method name</p>","abstract":false,"args":[{"name":"token_type","doc":null,"default_value":"","external_name":"token_type","restriction":""},{"name":"method_name","doc":null,"default_value":"","external_name":"method_name","restriction":""}],"args_string":"(token_type, method_name)","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L10","def":{"name":"add_prefix","args":[{"name":"token_type","doc":null,"default_value":"","external_name":"token_type","restriction":""},{"name":"method_name","doc":null,"default_value":"","external_name":"method_name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"  self.register_prefix TokenType::\n{{ token_type }}\n, ->\n{ self.\n{{ method_name }}\n.as(AST::Expression?) }\n\n"}},{"id":"eat_or_return_nil(token_type)-macro","html_id":"eat_or_return_nil(token_type)-macro","name":"eat_or_return_nil","doc":"Little bit of code cleanup regarding use of `self.eat?`","summary":"<p>Little bit of code cleanup regarding use of <code>self.eat?</code></p>","abstract":false,"args":[{"name":"token_type","doc":null,"default_value":"","external_name":"token_type","restriction":""}],"args_string":"(token_type)","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L20","def":{"name":"eat_or_return_nil","args":[{"name":"token_type","doc":null,"default_value":"","external_name":"token_type","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"  if !self.eat? TokenType::\n{{ token_type }}\n\n    return nil\n  \nend\n\n"}}],"types":[{"html_id":"github.com/drizzle-lang/drizzle/Drizzle","path":"Drizzle.html","kind":"module","full_name":"Drizzle","name":"Drizzle","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"drizzle/token.cr","line_number":1,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr"},{"filename":"drizzle/lexer.cr","line_number":3,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/lexer.cr"},{"filename":"drizzle/ast/node.cr","line_number":1,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/node.cr"},{"filename":"drizzle/ast/statement.cr","line_number":3,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/statement.cr"},{"filename":"drizzle/ast/block.cr","line_number":4,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/block.cr"},{"filename":"drizzle/ast/expression.cr","line_number":3,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/expression.cr"},{"filename":"drizzle/ast/boolean_literal.cr","line_number":4,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/boolean_literal.cr"},{"filename":"drizzle/ast/identifier.cr","line_number":4,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/identifier.cr"},{"filename":"drizzle/ast/call_expression.cr","line_number":5,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/call_expression.cr"},{"filename":"drizzle/ast/expression_statement.cr","line_number":5,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/expression_statement.cr"},{"filename":"drizzle/ast/typed_identifier.cr","line_number":4,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/typed_identifier.cr"},{"filename":"drizzle/ast/function.cr","line_number":7,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/function.cr"},{"filename":"drizzle/ast/if_statement.cr","line_number":6,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/if_statement.cr"},{"filename":"drizzle/ast/infix_expression.cr","line_number":4,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/infix_expression.cr"},{"filename":"drizzle/ast/integer_literal.cr","line_number":4,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/integer_literal.cr"},{"filename":"drizzle/ast/let.cr","line_number":6,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/let.cr"},{"filename":"drizzle/ast/prefix_expression.cr","line_number":4,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/prefix_expression.cr"},{"filename":"drizzle/ast/program.cr","line_number":3,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/program.cr"},{"filename":"drizzle/ast/return.cr","line_number":5,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/return.cr"},{"filename":"drizzle/parser.cr","line_number":26,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr"},{"filename":"drizzle/repl.cr","line_number":1,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/repl.cr"},{"filename":"drizzle/version.cr","line_number":1,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/version.cr"},{"filename":"drizzle.cr","line_number":11,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle.cr"}],"repository_name":"github.com/drizzle-lang/drizzle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"Keywords","name":"Keywords","value":"{\"let\" => TokenType::LET, \"def\" => TokenType::FUNCTION, \"return\" => TokenType::RETURN, \"if\" => TokenType::IF, \"elsif\" => TokenType::ELSIF, \"else\" => TokenType::ELSE, \"not\" => TokenType::NOT, \"true\" => TokenType::TRUE, \"false\" => TokenType::FALSE}","doc":"Hash of all keywords in Drizzle to their corresponding TokenTypes.\n\nUsed as part of the `Lexer`'s process of generating a new Token in order to determine whether a read string of characters is a keyword or not.","summary":"<p>Hash of all keywords in Drizzle to their corresponding TokenTypes.</p>"},{"id":"PrecedenceMap","name":"PrecedenceMap","value":"{TokenType::EQ => Precedence::EQUALS, TokenType::NOT_EQ => Precedence::EQUALS, TokenType::LT => Precedence::LESSGREATER, TokenType::GT => Precedence::LESSGREATER, TokenType::PLUS => Precedence::SUM, TokenType::MINUS => Precedence::SUM, TokenType::ASTERISK => Precedence::PRODUCT, TokenType::SLASH => Precedence::PRODUCT, TokenType::LEFT_PAREN => Precedence::CALL}","doc":"Mapping of TokenTypes to Precedence values to use in infix expression parsing","summary":"<p>Mapping of TokenTypes to Precedence values to use in infix expression parsing</p>"},{"id":"VERSION","name":"VERSION","value":"\"0.1.0\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Drizzle is a (currently interpreted, eventually compiled) programming language that tries to strike a balance between readability and type safety, with a bit of speed thrown into the mix.\n\nPlease bear in mind that these docs are generated by running `crystal docs` on the source of the interpreter / compiler.\nAs a result, these docs are intended for the people who wish to contribute to the implemenation of the language.\n\nFor usage documentation, please see [here](https://drizzle-lang.github.io/) instead.","summary":"<p>Drizzle is a (currently interpreted, eventually compiled) programming language that tries to strike a balance between readability and type safety, with a bit of speed thrown into the mix.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST","path":"Drizzle/AST.html","kind":"module","full_name":"Drizzle::AST","name":"AST","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"drizzle/ast/node.cr","line_number":3,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/node.cr"},{"filename":"drizzle/ast/statement.cr","line_number":4,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/statement.cr"},{"filename":"drizzle/ast/block.cr","line_number":5,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/block.cr"},{"filename":"drizzle/ast/expression.cr","line_number":4,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/expression.cr"},{"filename":"drizzle/ast/boolean_literal.cr","line_number":5,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/boolean_literal.cr"},{"filename":"drizzle/ast/identifier.cr","line_number":5,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/identifier.cr"},{"filename":"drizzle/ast/call_expression.cr","line_number":6,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/call_expression.cr"},{"filename":"drizzle/ast/expression_statement.cr","line_number":6,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/expression_statement.cr"},{"filename":"drizzle/ast/typed_identifier.cr","line_number":5,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/typed_identifier.cr"},{"filename":"drizzle/ast/function.cr","line_number":8,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/function.cr"},{"filename":"drizzle/ast/if_statement.cr","line_number":7,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/if_statement.cr"},{"filename":"drizzle/ast/infix_expression.cr","line_number":5,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/infix_expression.cr"},{"filename":"drizzle/ast/integer_literal.cr","line_number":5,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/integer_literal.cr"},{"filename":"drizzle/ast/let.cr","line_number":7,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/let.cr"},{"filename":"drizzle/ast/prefix_expression.cr","line_number":5,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/prefix_expression.cr"},{"filename":"drizzle/ast/program.cr","line_number":4,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/program.cr"},{"filename":"drizzle/ast/return.cr","line_number":6,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/return.cr"}],"repository_name":"github.com/drizzle-lang/drizzle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle","kind":"module","full_name":"Drizzle","name":"Drizzle"},"doc":"The AST module contains classes that represent each of the different types of nodes that can be encountered when parsing the Token output from a `Lexer`","summary":"<p>The AST module contains classes that represent each of the different types of nodes that can be encountered when parsing the Token output from a <code><a href=\"../Drizzle/Lexer.html\">Lexer</a></code></p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/BlockStatement","path":"Drizzle/AST/BlockStatement.html","kind":"class","full_name":"Drizzle::AST::BlockStatement","name":"BlockStatement","abstract":false,"superclass":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Statement","kind":"class","full_name":"Drizzle::AST::Statement","name":"Statement"},"ancestors":[{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Statement","kind":"class","full_name":"Drizzle::AST::Statement","name":"Statement"},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Node","kind":"class","full_name":"Drizzle::AST::Node","name":"Node"},{"html_id":"github.com/drizzle-lang/drizzle/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/drizzle-lang/drizzle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"drizzle/ast/block.cr","line_number":7,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/block.cr"}],"repository_name":"github.com/drizzle-lang/drizzle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST","kind":"module","full_name":"Drizzle::AST","name":"AST"},"doc":"Node defining a block. A block is a set of statements contained within braces.","summary":"<p>Node defining a block.</p>","class_methods":[],"constructors":[{"id":"new(token:Token,statements:Array(Statement))-class-method","html_id":"new(token:Token,statements:Array(Statement))-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":"Token"},{"name":"statements","doc":null,"default_value":"","external_name":"statements","restriction":"Array(Statement)"}],"args_string":"(token : Token, statements : Array(Statement))","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/block.cr#L11","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/block.cr#L11","def":{"name":"new","args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":"Token"},{"name":"statements","doc":null,"default_value":"","external_name":"statements","restriction":"Array(Statement)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(token, statements)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"literal:String-instance-method","html_id":"literal:String-instance-method","name":"literal","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/block.cr#L14","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/block.cr#L14","def":{"name":"literal","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"return @token.literal"}},{"id":"statements:Array(Drizzle::AST::Statement)-instance-method","html_id":"statements:Array(Drizzle::AST::Statement)-instance-method","name":"statements","doc":"The array of statements contained within the block","summary":"<p>The array of statements contained within the block</p>","abstract":false,"args":[],"args_string":" : Array(Drizzle::AST::Statement)","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/block.cr#L30","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/block.cr#L30","def":{"name":"statements","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@statements"}},{"id":"to_s:String-instance-method","html_id":"to_s:String-instance-method","name":"to_s","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/block.cr#L18","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/block.cr#L18","def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"builder = String::Builder.new\n@statements.each do |stmnt|\n  builder << stmnt.to_s\nend\nreturn builder.to_s\n"}},{"id":"token:Drizzle::Token-instance-method","html_id":"token:Drizzle::Token-instance-method","name":"token","doc":"The token that led to the creation of the node","summary":"<p>The token that led to the creation of the node</p>","abstract":false,"args":[],"args_string":" : Drizzle::Token","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/block.cr#L27","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/block.cr#L27","def":{"name":"token","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@token"}}],"macros":[],"types":[]},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/BooleanLiteral","path":"Drizzle/AST/BooleanLiteral.html","kind":"class","full_name":"Drizzle::AST::BooleanLiteral","name":"BooleanLiteral","abstract":false,"superclass":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Expression","kind":"class","full_name":"Drizzle::AST::Expression","name":"Expression"},"ancestors":[{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Expression","kind":"class","full_name":"Drizzle::AST::Expression","name":"Expression"},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Node","kind":"class","full_name":"Drizzle::AST::Node","name":"Node"},{"html_id":"github.com/drizzle-lang/drizzle/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/drizzle-lang/drizzle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"drizzle/ast/boolean_literal.cr","line_number":7,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/boolean_literal.cr"}],"repository_name":"github.com/drizzle-lang/drizzle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST","kind":"module","full_name":"Drizzle::AST","name":"AST"},"doc":"Node class representing an Integer.","summary":"<p>Node class representing an Integer.</p>","class_methods":[],"constructors":[{"id":"new(token,value)-class-method","html_id":"new(token,value)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(token, value)","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/boolean_literal.cr#L11","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/boolean_literal.cr#L11","def":{"name":"new","args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(token, value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"literal:String-instance-method","html_id":"literal:String-instance-method","name":"literal","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/boolean_literal.cr#L14","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/boolean_literal.cr#L14","def":{"name":"literal","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"return @token.literal"}},{"id":"to_s:String-instance-method","html_id":"to_s:String-instance-method","name":"to_s","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/boolean_literal.cr#L18","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/boolean_literal.cr#L18","def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"return @token.literal"}},{"id":"token:Drizzle::Token-instance-method","html_id":"token:Drizzle::Token-instance-method","name":"token","doc":"The token that caused the generation of this node","summary":"<p>The token that caused the generation of this node</p>","abstract":false,"args":[],"args_string":" : Drizzle::Token","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/boolean_literal.cr#L23","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/boolean_literal.cr#L23","def":{"name":"token","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@token"}},{"id":"value:Bool-instance-method","html_id":"value:Bool-instance-method","name":"value","doc":"The value of the boolean","summary":"<p>The value of the boolean</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/boolean_literal.cr#L25","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/boolean_literal.cr#L25","def":{"name":"value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@value"}}],"macros":[],"types":[]},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/CallExpression","path":"Drizzle/AST/CallExpression.html","kind":"class","full_name":"Drizzle::AST::CallExpression","name":"CallExpression","abstract":false,"superclass":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Expression","kind":"class","full_name":"Drizzle::AST::Expression","name":"Expression"},"ancestors":[{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Expression","kind":"class","full_name":"Drizzle::AST::Expression","name":"Expression"},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Node","kind":"class","full_name":"Drizzle::AST::Node","name":"Node"},{"html_id":"github.com/drizzle-lang/drizzle/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/drizzle-lang/drizzle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"drizzle/ast/call_expression.cr","line_number":8,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/call_expression.cr"}],"repository_name":"github.com/drizzle-lang/drizzle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST","kind":"module","full_name":"Drizzle::AST","name":"AST"},"doc":"Node class for handling function call expressions","summary":"<p>Node class for handling function call expressions</p>","class_methods":[],"constructors":[{"id":"new(token:Token,function:Identifier,arguments:Array(Expression))-class-method","html_id":"new(token:Token,function:Identifier,arguments:Array(Expression))-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":"Token"},{"name":"function","doc":null,"default_value":"","external_name":"function","restriction":"Identifier"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":"Array(Expression)"}],"args_string":"(token : Token, function : Identifier, arguments : Array(Expression))","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/call_expression.cr#L13","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/call_expression.cr#L13","def":{"name":"new","args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":"Token"},{"name":"function","doc":null,"default_value":"","external_name":"function","restriction":"Identifier"},{"name":"arguments","doc":null,"default_value":"","external_name":"arguments","restriction":"Array(Expression)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(token, function, arguments)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"arguments:Array(Drizzle::AST::Expression)-instance-method","html_id":"arguments:Array(Drizzle::AST::Expression)-instance-method","name":"arguments","doc":"The array of arguments to be passed into the function","summary":"<p>The array of arguments to be passed into the function</p>","abstract":false,"args":[],"args_string":" : Array(Drizzle::AST::Expression)","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/call_expression.cr#L36","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/call_expression.cr#L36","def":{"name":"arguments","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@arguments"}},{"id":"function:Drizzle::AST::Identifier-instance-method","html_id":"function:Drizzle::AST::Identifier-instance-method","name":"function","doc":"The identifier representing the function name to call","summary":"<p>The identifier representing the function name to call</p>","abstract":false,"args":[],"args_string":" : Drizzle::AST::Identifier","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/call_expression.cr#L33","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/call_expression.cr#L33","def":{"name":"function","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@function"}},{"id":"literal:String-instance-method","html_id":"literal:String-instance-method","name":"literal","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/call_expression.cr#L16","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/call_expression.cr#L16","def":{"name":"literal","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"return @token.literal"}},{"id":"to_s:String-instance-method","html_id":"to_s:String-instance-method","name":"to_s","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/call_expression.cr#L20","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/call_expression.cr#L20","def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"args = [] of String\n@arguments.each do |arg|\n  args << arg.to_s\nend\nreturn \"#{@function.to_s}(#{args.join(\", \")})\"\n"}},{"id":"token:Drizzle::Token-instance-method","html_id":"token:Drizzle::Token-instance-method","name":"token","doc":"The token that caused the creation of this node instance","summary":"<p>The token that caused the creation of this node instance</p>","abstract":false,"args":[],"args_string":" : Drizzle::Token","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/call_expression.cr#L30","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/call_expression.cr#L30","def":{"name":"token","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@token"}}],"macros":[],"types":[]},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Expression","path":"Drizzle/AST/Expression.html","kind":"class","full_name":"Drizzle::AST::Expression","name":"Expression","abstract":true,"superclass":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Node","kind":"class","full_name":"Drizzle::AST::Node","name":"Node"},"ancestors":[{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Node","kind":"class","full_name":"Drizzle::AST::Node","name":"Node"},{"html_id":"github.com/drizzle-lang/drizzle/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/drizzle-lang/drizzle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"drizzle/ast/expression.cr","line_number":8,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/expression.cr"}],"repository_name":"github.com/drizzle-lang/drizzle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/BooleanLiteral","kind":"class","full_name":"Drizzle::AST::BooleanLiteral","name":"BooleanLiteral"},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/CallExpression","kind":"class","full_name":"Drizzle::AST::CallExpression","name":"CallExpression"},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Identifier","kind":"class","full_name":"Drizzle::AST::Identifier","name":"Identifier"},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/InfixExpression","kind":"class","full_name":"Drizzle::AST::InfixExpression","name":"InfixExpression"},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/IntegerLiteral","kind":"class","full_name":"Drizzle::AST::IntegerLiteral","name":"IntegerLiteral"},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/PrefixExpression","kind":"class","full_name":"Drizzle::AST::PrefixExpression","name":"PrefixExpression"}],"including_types":[],"namespace":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST","kind":"module","full_name":"Drizzle::AST","name":"AST"},"doc":"Abstract class set up as the parent for all nodes that represent expressions\n\nAn expression is anything that gives a value","summary":"<p>Abstract class set up as the parent for all nodes that represent expressions</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/ExpressionStatement","path":"Drizzle/AST/ExpressionStatement.html","kind":"class","full_name":"Drizzle::AST::ExpressionStatement","name":"ExpressionStatement","abstract":false,"superclass":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Statement","kind":"class","full_name":"Drizzle::AST::Statement","name":"Statement"},"ancestors":[{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Statement","kind":"class","full_name":"Drizzle::AST::Statement","name":"Statement"},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Node","kind":"class","full_name":"Drizzle::AST::Node","name":"Node"},{"html_id":"github.com/drizzle-lang/drizzle/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/drizzle-lang/drizzle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"drizzle/ast/expression_statement.cr","line_number":9,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/expression_statement.cr"}],"repository_name":"github.com/drizzle-lang/drizzle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST","kind":"module","full_name":"Drizzle::AST","name":"AST"},"doc":"Node representing an expression statement, which is a single expression on its own line\n<expression>","summary":"<p>Node representing an expression statement, which is a single expression on its own line &lt;expression></p>","class_methods":[],"constructors":[{"id":"new(token,expression)-class-method","html_id":"new(token,expression)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":""},{"name":"expression","doc":null,"default_value":"","external_name":"expression","restriction":""}],"args_string":"(token, expression)","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/expression_statement.cr#L13","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/expression_statement.cr#L13","def":{"name":"new","args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":""},{"name":"expression","doc":null,"default_value":"","external_name":"expression","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(token, expression)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"expression:Drizzle::AST::Expression?-instance-method","html_id":"expression:Drizzle::AST::Expression?-instance-method","name":"expression","doc":"The expression that makes up the node","summary":"<p>The expression that makes up the node</p>","abstract":false,"args":[],"args_string":" : Drizzle::AST::Expression?","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/expression_statement.cr#L27","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/expression_statement.cr#L27","def":{"name":"expression","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@expression"}},{"id":"literal:String-instance-method","html_id":"literal:String-instance-method","name":"literal","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/expression_statement.cr#L16","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/expression_statement.cr#L16","def":{"name":"literal","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"return @token.literal"}},{"id":"to_s:String-instance-method","html_id":"to_s:String-instance-method","name":"to_s","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/expression_statement.cr#L20","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/expression_statement.cr#L20","def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"return @expression.to_s"}},{"id":"token:Drizzle::Token-instance-method","html_id":"token:Drizzle::Token-instance-method","name":"token","doc":"The token that caused the generation of this node","summary":"<p>The token that caused the generation of this node</p>","abstract":false,"args":[],"args_string":" : Drizzle::Token","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/expression_statement.cr#L25","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/expression_statement.cr#L25","def":{"name":"token","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@token"}}],"macros":[],"types":[]},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Function","path":"Drizzle/AST/Function.html","kind":"class","full_name":"Drizzle::AST::Function","name":"Function","abstract":false,"superclass":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Statement","kind":"class","full_name":"Drizzle::AST::Statement","name":"Statement"},"ancestors":[{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Statement","kind":"class","full_name":"Drizzle::AST::Statement","name":"Statement"},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Node","kind":"class","full_name":"Drizzle::AST::Node","name":"Node"},{"html_id":"github.com/drizzle-lang/drizzle/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/drizzle-lang/drizzle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"drizzle/ast/function.cr","line_number":12,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/function.cr"}],"repository_name":"github.com/drizzle-lang/drizzle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST","kind":"module","full_name":"Drizzle::AST","name":"AST"},"doc":"Node representing a function definition. Functions are first-class in Drizzle, meaning that function names can be used as normal expressions.\n\nThe difference between what Drizzle does and what Monkey does is that in Monkey, the function literals themselves are expressions, whereas in Drizzle they are statements.","summary":"<p>Node representing a function definition.</p>","class_methods":[],"constructors":[{"id":"new(token:Token,name:Identifier,params:Array(TypedIdentifier),ret_type:Identifier?,body:BlockStatement)-class-method","html_id":"new(token:Token,name:Identifier,params:Array(TypedIdentifier),ret_type:Identifier?,body:BlockStatement)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":"Token"},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"Identifier"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"Array(TypedIdentifier)"},{"name":"ret_type","doc":null,"default_value":"","external_name":"ret_type","restriction":"Identifier | ::Nil"},{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"BlockStatement"}],"args_string":"(token : Token, name : Identifier, params : Array(TypedIdentifier), ret_type : Identifier?, body : BlockStatement)","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/function.cr#L19","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/function.cr#L19","def":{"name":"new","args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":"Token"},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"Identifier"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"Array(TypedIdentifier)"},{"name":"ret_type","doc":null,"default_value":"","external_name":"ret_type","restriction":"Identifier | ::Nil"},{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"BlockStatement"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(token, name, params, ret_type, body)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"body:Drizzle::AST::BlockStatement-instance-method","html_id":"body:Drizzle::AST::BlockStatement-instance-method","name":"body","doc":"The block making up the body of the function","summary":"<p>The block making up the body of the function</p>","abstract":false,"args":[],"args_string":" : Drizzle::AST::BlockStatement","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/function.cr#L48","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/function.cr#L48","def":{"name":"body","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@body"}},{"id":"literal:String-instance-method","html_id":"literal:String-instance-method","name":"literal","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/function.cr#L22","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/function.cr#L22","def":{"name":"literal","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"return @token.literal"}},{"id":"name:Drizzle::AST::Identifier-instance-method","html_id":"name:Drizzle::AST::Identifier-instance-method","name":"name","doc":"The Identifier node representing the name of the function","summary":"<p>The Identifier node representing the name of the function</p>","abstract":false,"args":[],"args_string":" : Drizzle::AST::Identifier","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/function.cr#L39","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/function.cr#L39","def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@name"}},{"id":"params:Array(Drizzle::AST::TypedIdentifier)-instance-method","html_id":"params:Array(Drizzle::AST::TypedIdentifier)-instance-method","name":"params","doc":"An array of TypedIdentifiers representing parameters to the function","summary":"<p>An array of TypedIdentifiers representing parameters to the function</p>","abstract":false,"args":[],"args_string":" : Array(Drizzle::AST::TypedIdentifier)","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/function.cr#L42","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/function.cr#L42","def":{"name":"params","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@params"}},{"id":"ret_type:Drizzle::AST::Identifier?-instance-method","html_id":"ret_type:Drizzle::AST::Identifier?-instance-method","name":"ret_type","doc":"The return type of the function","summary":"<p>The return type of the function</p>","abstract":false,"args":[],"args_string":" : Drizzle::AST::Identifier?","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/function.cr#L45","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/function.cr#L45","def":{"name":"ret_type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@ret_type"}},{"id":"to_s:String-instance-method","html_id":"to_s:String-instance-method","name":"to_s","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/function.cr#L26","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/function.cr#L26","def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"param_strings = [] of String\n@params.each do |param|\n  param_strings << param.to_s\nend\nreturn \"#{@token.literal} #{@name.to_s} (#{param_strings.join(\", \")}) #{@body.to_s}\"\n"}},{"id":"token:Drizzle::Token-instance-method","html_id":"token:Drizzle::Token-instance-method","name":"token","doc":"The token that led to the creation of the node","summary":"<p>The token that led to the creation of the node</p>","abstract":false,"args":[],"args_string":" : Drizzle::Token","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/function.cr#L36","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/function.cr#L36","def":{"name":"token","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@token"}}],"macros":[],"types":[]},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Identifier","path":"Drizzle/AST/Identifier.html","kind":"class","full_name":"Drizzle::AST::Identifier","name":"Identifier","abstract":false,"superclass":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Expression","kind":"class","full_name":"Drizzle::AST::Expression","name":"Expression"},"ancestors":[{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Expression","kind":"class","full_name":"Drizzle::AST::Expression","name":"Expression"},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Node","kind":"class","full_name":"Drizzle::AST::Node","name":"Node"},{"html_id":"github.com/drizzle-lang/drizzle/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/drizzle-lang/drizzle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"drizzle/ast/identifier.cr","line_number":12,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/identifier.cr"}],"repository_name":"github.com/drizzle-lang/drizzle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/TypedIdentifier","kind":"class","full_name":"Drizzle::AST::TypedIdentifier","name":"TypedIdentifier"}],"including_types":[],"namespace":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST","kind":"module","full_name":"Drizzle::AST","name":"AST"},"doc":"Node class representing an Identifier.\nAn identifier is a name, be it for a function, variable, etc\n\nAn Identifier is classed as an `Expression` because of situations such as `let x: int = y`.\nIn this case, `y` is an identifier (a variable) that returns a value.\nWe could have separate identifier tokens for left and right sides of an `=` symbol but that overcomplicates things a bit.","summary":"<p>Node class representing an Identifier.</p>","class_methods":[],"constructors":[{"id":"new(token,value)-class-method","html_id":"new(token,value)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(token, value)","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/identifier.cr#L16","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/identifier.cr#L16","def":{"name":"new","args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(token, value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"literal:String-instance-method","html_id":"literal:String-instance-method","name":"literal","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/identifier.cr#L19","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/identifier.cr#L19","def":{"name":"literal","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"return @token.literal"}},{"id":"to_s:String-instance-method","html_id":"to_s:String-instance-method","name":"to_s","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/identifier.cr#L23","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/identifier.cr#L23","def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"return @value"}},{"id":"token:Drizzle::Token-instance-method","html_id":"token:Drizzle::Token-instance-method","name":"token","doc":"The token that caused the generation of this node","summary":"<p>The token that caused the generation of this node</p>","abstract":false,"args":[],"args_string":" : Drizzle::Token","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/identifier.cr#L28","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/identifier.cr#L28","def":{"name":"token","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@token"}},{"id":"value:String-instance-method","html_id":"value:String-instance-method","name":"value","doc":"The value of the identifier\n\ne.g. the name of the function / variable","summary":"<p>The value of the identifier</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/identifier.cr#L32","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/identifier.cr#L32","def":{"name":"value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@value"}}],"macros":[],"types":[]},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/IfStatement","path":"Drizzle/AST/IfStatement.html","kind":"class","full_name":"Drizzle::AST::IfStatement","name":"IfStatement","abstract":false,"superclass":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Statement","kind":"class","full_name":"Drizzle::AST::Statement","name":"Statement"},"ancestors":[{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Statement","kind":"class","full_name":"Drizzle::AST::Statement","name":"Statement"},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Node","kind":"class","full_name":"Drizzle::AST::Node","name":"Node"},{"html_id":"github.com/drizzle-lang/drizzle/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/drizzle-lang/drizzle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"drizzle/ast/if_statement.cr","line_number":10,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/if_statement.cr"}],"repository_name":"github.com/drizzle-lang/drizzle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST","kind":"module","full_name":"Drizzle::AST","name":"AST"},"doc":"Node representing an if statement.\n`if (<condition>) <consequence> (elsif (<condition>) <consequence>)* (else <alternative>)?`","summary":"<p>Node representing an if statement.</p>","class_methods":[],"constructors":[{"id":"new(token:Token,condition:Expression,consequence:BlockStatement,alt_consequences:Array(IfStatement)=[]ofIfStatement,alternative:BlockStatement?=nil)-class-method","html_id":"new(token:Token,condition:Expression,consequence:BlockStatement,alt_consequences:Array(IfStatement)=[]ofIfStatement,alternative:BlockStatement?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":"Token"},{"name":"condition","doc":null,"default_value":"","external_name":"condition","restriction":"Expression"},{"name":"consequence","doc":null,"default_value":"","external_name":"consequence","restriction":"BlockStatement"},{"name":"alt_consequences","doc":null,"default_value":"[] of IfStatement","external_name":"alt_consequences","restriction":"Array(IfStatement)"},{"name":"alternative","doc":null,"default_value":"nil","external_name":"alternative","restriction":"BlockStatement | ::Nil"}],"args_string":"(token : Token, condition : Expression, consequence : BlockStatement, alt_consequences : Array(IfStatement) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">IfStatement</span>, alternative : BlockStatement? = <span class=\"n\">nil</span>)","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/if_statement.cr#L17","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/if_statement.cr#L17","def":{"name":"new","args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":"Token"},{"name":"condition","doc":null,"default_value":"","external_name":"condition","restriction":"Expression"},{"name":"consequence","doc":null,"default_value":"","external_name":"consequence","restriction":"BlockStatement"},{"name":"alt_consequences","doc":null,"default_value":"[] of IfStatement","external_name":"alt_consequences","restriction":"Array(IfStatement)"},{"name":"alternative","doc":null,"default_value":"nil","external_name":"alternative","restriction":"BlockStatement | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(token, condition, consequence, alt_consequences, alternative)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"alt_consequences:Array(Drizzle::AST::IfStatement)-instance-method","html_id":"alt_consequences:Array(Drizzle::AST::IfStatement)-instance-method","name":"alt_consequences","doc":"An optional array of alternative conditions and consequences to run in case the first condition fails","summary":"<p>An optional array of alternative conditions and consequences to run in case the first condition fails</p>","abstract":false,"args":[],"args_string":" : Array(Drizzle::AST::IfStatement)","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/if_statement.cr#L46","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/if_statement.cr#L46","def":{"name":"alt_consequences","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@alt_consequences"}},{"id":"alternative:Drizzle::AST::BlockStatement?-instance-method","html_id":"alternative:Drizzle::AST::BlockStatement?-instance-method","name":"alternative","doc":"An optional alternative block to be run if all prior conditions have failed","summary":"<p>An optional alternative block to be run if all prior conditions have failed</p>","abstract":false,"args":[],"args_string":" : Drizzle::AST::BlockStatement?","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/if_statement.cr#L49","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/if_statement.cr#L49","def":{"name":"alternative","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@alternative"}},{"id":"condition:Drizzle::AST::Expression-instance-method","html_id":"condition:Drizzle::AST::Expression-instance-method","name":"condition","doc":"The initial condition to be tested","summary":"<p>The initial condition to be tested</p>","abstract":false,"args":[],"args_string":" : Drizzle::AST::Expression","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/if_statement.cr#L40","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/if_statement.cr#L40","def":{"name":"condition","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@condition"}},{"id":"consequence:Drizzle::AST::BlockStatement-instance-method","html_id":"consequence:Drizzle::AST::BlockStatement-instance-method","name":"consequence","doc":"The set of statements to be run if the initial condition has proven to be true","summary":"<p>The set of statements to be run if the initial condition has proven to be true</p>","abstract":false,"args":[],"args_string":" : Drizzle::AST::BlockStatement","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/if_statement.cr#L43","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/if_statement.cr#L43","def":{"name":"consequence","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@consequence"}},{"id":"literal:String-instance-method","html_id":"literal:String-instance-method","name":"literal","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/if_statement.cr#L20","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/if_statement.cr#L20","def":{"name":"literal","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"return @token.literal"}},{"id":"to_s:String-instance-method","html_id":"to_s:String-instance-method","name":"to_s","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/if_statement.cr#L24","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/if_statement.cr#L24","def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"builder = String::Builder.new\nbuilder << \"if #{@condition.to_s} #{@consequence.to_s}\"\n@alt_consequences.each do |alt|\n  builder << \" #{alt.to_s}\"\nend\nif !@alternative.nil?\n  builder << \" #{@alternative.to_s}\"\nend\nreturn builder.to_s\n"}},{"id":"token:Drizzle::Token-instance-method","html_id":"token:Drizzle::Token-instance-method","name":"token","doc":"The token that led to the creation of the statement node","summary":"<p>The token that led to the creation of the statement node</p>","abstract":false,"args":[],"args_string":" : Drizzle::Token","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/if_statement.cr#L37","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/if_statement.cr#L37","def":{"name":"token","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@token"}}],"macros":[],"types":[]},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/InfixExpression","path":"Drizzle/AST/InfixExpression.html","kind":"class","full_name":"Drizzle::AST::InfixExpression","name":"InfixExpression","abstract":false,"superclass":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Expression","kind":"class","full_name":"Drizzle::AST::Expression","name":"Expression"},"ancestors":[{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Expression","kind":"class","full_name":"Drizzle::AST::Expression","name":"Expression"},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Node","kind":"class","full_name":"Drizzle::AST::Node","name":"Node"},{"html_id":"github.com/drizzle-lang/drizzle/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/drizzle-lang/drizzle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"drizzle/ast/infix_expression.cr","line_number":7,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/infix_expression.cr"}],"repository_name":"github.com/drizzle-lang/drizzle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST","kind":"module","full_name":"Drizzle::AST","name":"AST"},"doc":"Node class representing an Infix Expression, like '+', '-', '*', '/', '==', '!=', etc","summary":"<p>Node class representing an Infix Expression, like '+', '-', '*', '/', '==', '!=', etc</p>","class_methods":[],"constructors":[{"id":"new(token,left,operator,right)-class-method","html_id":"new(token,left,operator,right)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":""},{"name":"left","doc":null,"default_value":"","external_name":"left","restriction":""},{"name":"operator","doc":null,"default_value":"","external_name":"operator","restriction":""},{"name":"right","doc":null,"default_value":"","external_name":"right","restriction":""}],"args_string":"(token, left, operator, right)","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/infix_expression.cr#L13","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/infix_expression.cr#L13","def":{"name":"new","args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":""},{"name":"left","doc":null,"default_value":"","external_name":"left","restriction":""},{"name":"operator","doc":null,"default_value":"","external_name":"operator","restriction":""},{"name":"right","doc":null,"default_value":"","external_name":"right","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(token, left, operator, right)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"left:Drizzle::AST::Expression?-instance-method","html_id":"left:Drizzle::AST::Expression?-instance-method","name":"left","doc":"The expression found on the left side of the operator","summary":"<p>The expression found on the left side of the operator</p>","abstract":false,"args":[],"args_string":" : Drizzle::AST::Expression?","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/infix_expression.cr#L27","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/infix_expression.cr#L27","def":{"name":"left","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@left"}},{"id":"literal:String-instance-method","html_id":"literal:String-instance-method","name":"literal","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/infix_expression.cr#L16","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/infix_expression.cr#L16","def":{"name":"literal","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"return @token.literal"}},{"id":"operator:String-instance-method","html_id":"operator:String-instance-method","name":"operator","doc":"The infix operator (+, -, *, /, etc)","summary":"<p>The infix operator (+, -, *, /, etc)</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/infix_expression.cr#L29","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/infix_expression.cr#L29","def":{"name":"operator","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@operator"}},{"id":"right:Drizzle::AST::Expression?-instance-method","html_id":"right:Drizzle::AST::Expression?-instance-method","name":"right","doc":"The expression found on the right side of the operator","summary":"<p>The expression found on the right side of the operator</p>","abstract":false,"args":[],"args_string":" : Drizzle::AST::Expression?","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/infix_expression.cr#L31","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/infix_expression.cr#L31","def":{"name":"right","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@right"}},{"id":"to_s:String-instance-method","html_id":"to_s:String-instance-method","name":"to_s","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/infix_expression.cr#L20","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/infix_expression.cr#L20","def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"return \"(#{@left.to_s} #{@operator} #{@right.to_s})\""}},{"id":"token:Drizzle::Token-instance-method","html_id":"token:Drizzle::Token-instance-method","name":"token","doc":"The token that caused the generation of this node","summary":"<p>The token that caused the generation of this node</p>","abstract":false,"args":[],"args_string":" : Drizzle::Token","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/infix_expression.cr#L25","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/infix_expression.cr#L25","def":{"name":"token","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@token"}}],"macros":[],"types":[]},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/IntegerLiteral","path":"Drizzle/AST/IntegerLiteral.html","kind":"class","full_name":"Drizzle::AST::IntegerLiteral","name":"IntegerLiteral","abstract":false,"superclass":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Expression","kind":"class","full_name":"Drizzle::AST::Expression","name":"Expression"},"ancestors":[{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Expression","kind":"class","full_name":"Drizzle::AST::Expression","name":"Expression"},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Node","kind":"class","full_name":"Drizzle::AST::Node","name":"Node"},{"html_id":"github.com/drizzle-lang/drizzle/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/drizzle-lang/drizzle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"drizzle/ast/integer_literal.cr","line_number":7,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/integer_literal.cr"}],"repository_name":"github.com/drizzle-lang/drizzle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST","kind":"module","full_name":"Drizzle::AST","name":"AST"},"doc":"Node class representing an Integer.","summary":"<p>Node class representing an Integer.</p>","class_methods":[],"constructors":[{"id":"new(token,value)-class-method","html_id":"new(token,value)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(token, value)","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/integer_literal.cr#L11","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/integer_literal.cr#L11","def":{"name":"new","args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(token, value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"literal:String-instance-method","html_id":"literal:String-instance-method","name":"literal","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/integer_literal.cr#L14","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/integer_literal.cr#L14","def":{"name":"literal","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"return @token.literal"}},{"id":"to_s:String-instance-method","html_id":"to_s:String-instance-method","name":"to_s","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/integer_literal.cr#L18","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/integer_literal.cr#L18","def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"return @token.literal"}},{"id":"token:Drizzle::Token-instance-method","html_id":"token:Drizzle::Token-instance-method","name":"token","doc":"The token that caused the generation of this node","summary":"<p>The token that caused the generation of this node</p>","abstract":false,"args":[],"args_string":" : Drizzle::Token","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/integer_literal.cr#L23","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/integer_literal.cr#L23","def":{"name":"token","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@token"}},{"id":"value:Int64-instance-method","html_id":"value:Int64-instance-method","name":"value","doc":"The value of the integer","summary":"<p>The value of the integer</p>","abstract":false,"args":[],"args_string":" : Int64","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/integer_literal.cr#L25","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/integer_literal.cr#L25","def":{"name":"value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@value"}}],"macros":[],"types":[]},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Let","path":"Drizzle/AST/Let.html","kind":"class","full_name":"Drizzle::AST::Let","name":"Let","abstract":false,"superclass":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Statement","kind":"class","full_name":"Drizzle::AST::Statement","name":"Statement"},"ancestors":[{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Statement","kind":"class","full_name":"Drizzle::AST::Statement","name":"Statement"},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Node","kind":"class","full_name":"Drizzle::AST::Node","name":"Node"},{"html_id":"github.com/drizzle-lang/drizzle/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/drizzle-lang/drizzle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"drizzle/ast/let.cr","line_number":10,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/let.cr"}],"repository_name":"github.com/drizzle-lang/drizzle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST","kind":"module","full_name":"Drizzle::AST","name":"AST"},"doc":"Node class representing a let statement.\n`let <identifier>: <identifier> = <expression>``","summary":"<p>Node class representing a let statement.</p>","class_methods":[],"constructors":[{"id":"new(token,name,value)-class-method","html_id":"new(token,name,value)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(token, name, value)","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/let.cr#L15","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/let.cr#L15","def":{"name":"new","args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(token, name, value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"literal:String-instance-method","html_id":"literal:String-instance-method","name":"literal","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/let.cr#L18","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/let.cr#L18","def":{"name":"literal","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"return @token.literal"}},{"id":"name:Drizzle::AST::TypedIdentifier-instance-method","html_id":"name:Drizzle::AST::TypedIdentifier-instance-method","name":"name","doc":"The name and type of the variable being assigned to","summary":"<p>The name and type of the variable being assigned to</p>","abstract":false,"args":[],"args_string":" : Drizzle::AST::TypedIdentifier","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/let.cr#L29","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/let.cr#L29","def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@name"}},{"id":"to_s:String-instance-method","html_id":"to_s:String-instance-method","name":"to_s","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/let.cr#L22","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/let.cr#L22","def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"return \"#{self.literal} #{@name.to_s} = #{@value.to_s}\""}},{"id":"token:Drizzle::Token-instance-method","html_id":"token:Drizzle::Token-instance-method","name":"token","doc":"The token that caused the generation of this node","summary":"<p>The token that caused the generation of this node</p>","abstract":false,"args":[],"args_string":" : Drizzle::Token","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/let.cr#L27","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/let.cr#L27","def":{"name":"token","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@token"}},{"id":"value:Drizzle::AST::Expression-instance-method","html_id":"value:Drizzle::AST::Expression-instance-method","name":"value","doc":"The expression that will generate a value to assign to the variable","summary":"<p>The expression that will generate a value to assign to the variable</p>","abstract":false,"args":[],"args_string":" : Drizzle::AST::Expression","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/let.cr#L31","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/let.cr#L31","def":{"name":"value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@value"}}],"macros":[],"types":[]},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Node","path":"Drizzle/AST/Node.html","kind":"class","full_name":"Drizzle::AST::Node","name":"Node","abstract":true,"superclass":{"html_id":"github.com/drizzle-lang/drizzle/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/drizzle-lang/drizzle/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/drizzle-lang/drizzle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"drizzle/ast/node.cr","line_number":5,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/node.cr"}],"repository_name":"github.com/drizzle-lang/drizzle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Expression","kind":"class","full_name":"Drizzle::AST::Expression","name":"Expression"},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Statement","kind":"class","full_name":"Drizzle::AST::Statement","name":"Statement"}],"including_types":[],"namespace":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST","kind":"module","full_name":"Drizzle::AST","name":"AST"},"doc":"Abstract base class that all Nodes inherit from, to give a single parent point","summary":"<p>Abstract base class that all Nodes inherit from, to give a single parent point</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"literal:String-instance-method","html_id":"literal:String-instance-method","name":"literal","doc":"Returns the literal for the token that made this node.","summary":"<p>Returns the literal for the token that made this node.</p>","abstract":true,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/node.cr#L7","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/node.cr#L7","def":{"name":"literal","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":""}},{"id":"to_s:String-instance-method","html_id":"to_s:String-instance-method","name":"to_s","doc":"Return a string form of the node\nUsed to print out the node in a nice way.","summary":"<p>Return a string form of the node Used to print out the node in a nice way.</p>","abstract":true,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/node.cr#L11","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/node.cr#L11","def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":""}}],"macros":[],"types":[]},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/PrefixExpression","path":"Drizzle/AST/PrefixExpression.html","kind":"class","full_name":"Drizzle::AST::PrefixExpression","name":"PrefixExpression","abstract":false,"superclass":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Expression","kind":"class","full_name":"Drizzle::AST::Expression","name":"Expression"},"ancestors":[{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Expression","kind":"class","full_name":"Drizzle::AST::Expression","name":"Expression"},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Node","kind":"class","full_name":"Drizzle::AST::Node","name":"Node"},{"html_id":"github.com/drizzle-lang/drizzle/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/drizzle-lang/drizzle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"drizzle/ast/prefix_expression.cr","line_number":7,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/prefix_expression.cr"}],"repository_name":"github.com/drizzle-lang/drizzle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST","kind":"module","full_name":"Drizzle::AST","name":"AST"},"doc":"Node class representing a Prefix Expression, such as unary `-`, or `not`","summary":"<p>Node class representing a Prefix Expression, such as unary <code>-</code>, or <code>not</code></p>","class_methods":[],"constructors":[{"id":"new(token,operator,right)-class-method","html_id":"new(token,operator,right)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":""},{"name":"operator","doc":null,"default_value":"","external_name":"operator","restriction":""},{"name":"right","doc":null,"default_value":"","external_name":"right","restriction":""}],"args_string":"(token, operator, right)","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/prefix_expression.cr#L12","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/prefix_expression.cr#L12","def":{"name":"new","args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":""},{"name":"operator","doc":null,"default_value":"","external_name":"operator","restriction":""},{"name":"right","doc":null,"default_value":"","external_name":"right","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(token, operator, right)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"literal:String-instance-method","html_id":"literal:String-instance-method","name":"literal","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/prefix_expression.cr#L15","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/prefix_expression.cr#L15","def":{"name":"literal","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"return @token.literal"}},{"id":"operator:String-instance-method","html_id":"operator:String-instance-method","name":"operator","doc":"The prefix operator (not, -)","summary":"<p>The prefix operator (not, -)</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/prefix_expression.cr#L26","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/prefix_expression.cr#L26","def":{"name":"operator","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@operator"}},{"id":"right:Drizzle::AST::Expression?-instance-method","html_id":"right:Drizzle::AST::Expression?-instance-method","name":"right","doc":"The expression that is bound by the prefix operator","summary":"<p>The expression that is bound by the prefix operator</p>","abstract":false,"args":[],"args_string":" : Drizzle::AST::Expression?","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/prefix_expression.cr#L28","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/prefix_expression.cr#L28","def":{"name":"right","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@right"}},{"id":"to_s:String-instance-method","html_id":"to_s:String-instance-method","name":"to_s","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/prefix_expression.cr#L19","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/prefix_expression.cr#L19","def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"return \"(#{@operator}#{@right.to_s})\""}},{"id":"token:Drizzle::Token-instance-method","html_id":"token:Drizzle::Token-instance-method","name":"token","doc":"The token that caused the generation of this node","summary":"<p>The token that caused the generation of this node</p>","abstract":false,"args":[],"args_string":" : Drizzle::Token","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/prefix_expression.cr#L24","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/prefix_expression.cr#L24","def":{"name":"token","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@token"}}],"macros":[],"types":[]},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Program","path":"Drizzle/AST/Program.html","kind":"class","full_name":"Drizzle::AST::Program","name":"Program","abstract":false,"superclass":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Statement","kind":"class","full_name":"Drizzle::AST::Statement","name":"Statement"},"ancestors":[{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Statement","kind":"class","full_name":"Drizzle::AST::Statement","name":"Statement"},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Node","kind":"class","full_name":"Drizzle::AST::Node","name":"Node"},{"html_id":"github.com/drizzle-lang/drizzle/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/drizzle-lang/drizzle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"drizzle/ast/program.cr","line_number":6,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/program.cr"}],"repository_name":"github.com/drizzle-lang/drizzle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST","kind":"module","full_name":"Drizzle::AST","name":"AST"},"doc":"A Program Node is the root of the entire program, and contains an array of statements.","summary":"<p>A Program Node is the root of the entire program, and contains an array of statements.</p>","class_methods":[],"constructors":[{"id":"new(statements:Array(Statement))-class-method","html_id":"new(statements:Array(Statement))-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"statements","doc":null,"default_value":"","external_name":"statements","restriction":"Array(Statement)"}],"args_string":"(statements : Array(Statement))","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/program.cr#L9","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/program.cr#L9","def":{"name":"new","args":[{"name":"statements","doc":null,"default_value":"","external_name":"statements","restriction":"Array(Statement)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(statements)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"literal:String-instance-method","html_id":"literal:String-instance-method","name":"literal","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/program.cr#L12","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/program.cr#L12","def":{"name":"literal","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"if @statements.empty?\n  return \"\"\nelse\n  return @statements[0].literal\nend"}},{"id":"statements:Array(Drizzle::AST::Statement)-instance-method","html_id":"statements:Array(Drizzle::AST::Statement)-instance-method","name":"statements","doc":"An array of statements that make up the program","summary":"<p>An array of statements that make up the program</p>","abstract":false,"args":[],"args_string":" : Array(Drizzle::AST::Statement)","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/program.cr#L29","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/program.cr#L29","def":{"name":"statements","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@statements"}},{"id":"to_s:String-instance-method","html_id":"to_s:String-instance-method","name":"to_s","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/program.cr#L20","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/program.cr#L20","def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"builder = String::Builder.new\n@statements.each do |stmnt|\n  builder << \"#{stmnt.to_s}\\n\"\nend\nreturn builder.to_s.chomp\n"}}],"macros":[],"types":[]},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Return","path":"Drizzle/AST/Return.html","kind":"class","full_name":"Drizzle::AST::Return","name":"Return","abstract":false,"superclass":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Statement","kind":"class","full_name":"Drizzle::AST::Statement","name":"Statement"},"ancestors":[{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Statement","kind":"class","full_name":"Drizzle::AST::Statement","name":"Statement"},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Node","kind":"class","full_name":"Drizzle::AST::Node","name":"Node"},{"html_id":"github.com/drizzle-lang/drizzle/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/drizzle-lang/drizzle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"drizzle/ast/return.cr","line_number":9,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/return.cr"}],"repository_name":"github.com/drizzle-lang/drizzle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST","kind":"module","full_name":"Drizzle::AST","name":"AST"},"doc":"Node class for representing a `return` statement\n`return <expression>`","summary":"<p>Node class for representing a <code>return</code> statement <code>return <expression></code></p>","class_methods":[],"constructors":[{"id":"new(token,value)-class-method","html_id":"new(token,value)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(token, value)","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/return.cr#L14","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/return.cr#L14","def":{"name":"new","args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(token, value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"literal:String-instance-method","html_id":"literal:String-instance-method","name":"literal","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/return.cr#L17","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/return.cr#L17","def":{"name":"literal","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"return @token.literal"}},{"id":"to_s:String-instance-method","html_id":"to_s:String-instance-method","name":"to_s","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/return.cr#L21","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/return.cr#L21","def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"return \"#{self.literal} #{@value.to_s}\""}},{"id":"token:Drizzle::Token-instance-method","html_id":"token:Drizzle::Token-instance-method","name":"token","doc":"The token that caused the generation of this node","summary":"<p>The token that caused the generation of this node</p>","abstract":false,"args":[],"args_string":" : Drizzle::Token","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/return.cr#L26","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/return.cr#L26","def":{"name":"token","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@token"}},{"id":"value:Drizzle::AST::Expression?-instance-method","html_id":"value:Drizzle::AST::Expression?-instance-method","name":"value","doc":"The expression that will be evaluated to return a result","summary":"<p>The expression that will be evaluated to return a result</p>","abstract":false,"args":[],"args_string":" : Drizzle::AST::Expression?","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/return.cr#L28","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/return.cr#L28","def":{"name":"value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@value"}}],"macros":[],"types":[]},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Statement","path":"Drizzle/AST/Statement.html","kind":"class","full_name":"Drizzle::AST::Statement","name":"Statement","abstract":true,"superclass":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Node","kind":"class","full_name":"Drizzle::AST::Node","name":"Node"},"ancestors":[{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Node","kind":"class","full_name":"Drizzle::AST::Node","name":"Node"},{"html_id":"github.com/drizzle-lang/drizzle/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/drizzle-lang/drizzle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"drizzle/ast/statement.cr","line_number":8,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/statement.cr"}],"repository_name":"github.com/drizzle-lang/drizzle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/BlockStatement","kind":"class","full_name":"Drizzle::AST::BlockStatement","name":"BlockStatement"},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/ExpressionStatement","kind":"class","full_name":"Drizzle::AST::ExpressionStatement","name":"ExpressionStatement"},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Function","kind":"class","full_name":"Drizzle::AST::Function","name":"Function"},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/IfStatement","kind":"class","full_name":"Drizzle::AST::IfStatement","name":"IfStatement"},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Let","kind":"class","full_name":"Drizzle::AST::Let","name":"Let"},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Program","kind":"class","full_name":"Drizzle::AST::Program","name":"Program"},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Return","kind":"class","full_name":"Drizzle::AST::Return","name":"Return"}],"including_types":[],"namespace":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST","kind":"module","full_name":"Drizzle::AST","name":"AST"},"doc":"Abstract class set up as the parent for all nodes that represent statements\n\nA statement is anything that does not return a value","summary":"<p>Abstract class set up as the parent for all nodes that represent statements</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/TypedIdentifier","path":"Drizzle/AST/TypedIdentifier.html","kind":"class","full_name":"Drizzle::AST::TypedIdentifier","name":"TypedIdentifier","abstract":false,"superclass":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Identifier","kind":"class","full_name":"Drizzle::AST::Identifier","name":"Identifier"},"ancestors":[{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Identifier","kind":"class","full_name":"Drizzle::AST::Identifier","name":"Identifier"},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Expression","kind":"class","full_name":"Drizzle::AST::Expression","name":"Expression"},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST/Node","kind":"class","full_name":"Drizzle::AST::Node","name":"Node"},{"html_id":"github.com/drizzle-lang/drizzle/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/drizzle-lang/drizzle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"drizzle/ast/typed_identifier.cr","line_number":8,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/typed_identifier.cr"}],"repository_name":"github.com/drizzle-lang/drizzle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/AST","kind":"module","full_name":"Drizzle::AST","name":"AST"},"doc":"Node class representing an Identifier with a data type.\n`name: type`","summary":"<p>Node class representing an Identifier with a data type.</p>","class_methods":[],"constructors":[{"id":"new(token:Token,value:String,datatype:Identifier)-class-method","html_id":"new(token:Token,value:String,datatype:Identifier)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":"Token"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"},{"name":"datatype","doc":null,"default_value":"","external_name":"datatype","restriction":"Identifier"}],"args_string":"(token : Token, value : String, datatype : Identifier)","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/typed_identifier.cr#L11","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/typed_identifier.cr#L11","def":{"name":"new","args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":"Token"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"},{"name":"datatype","doc":null,"default_value":"","external_name":"datatype","restriction":"Identifier"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(token, value, datatype)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"datatype:Drizzle::AST::Identifier-instance-method","html_id":"datatype:Drizzle::AST::Identifier-instance-method","name":"datatype","doc":"The type that has been given to this identifier. Currently only one typed variables are being handled, no union type handling yet.","summary":"<p>The type that has been given to this identifier.</p>","abstract":false,"args":[],"args_string":" : Drizzle::AST::Identifier","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/typed_identifier.cr#L19","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/typed_identifier.cr#L19","def":{"name":"datatype","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@datatype"}},{"id":"to_s:String-instance-method","html_id":"to_s:String-instance-method","name":"to_s","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/typed_identifier.cr#L14","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/ast/typed_identifier.cr#L14","def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"return \"#{@value}: #{@datatype.to_s}\""}}],"macros":[],"types":[]}]},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/InfixParser","path":"Drizzle/InfixParser.html","kind":"alias","full_name":"Drizzle::InfixParser","name":"InfixParser","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"drizzle/parser.cr","line_number":30,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr"}],"repository_name":"github.com/drizzle-lang/drizzle","program":false,"enum":false,"alias":true,"aliased":"Proc(Drizzle::AST::Expression, Drizzle::AST::Expression)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle","kind":"module","full_name":"Drizzle","name":"Drizzle"},"doc":"# Type alias for Proc objects used in infix notation parsing","summary":"<h1>Type alias for Proc objects used in infix notation parsing</h1>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/Lexer","path":"Drizzle/Lexer.html","kind":"class","full_name":"Drizzle::Lexer","name":"Lexer","abstract":false,"superclass":{"html_id":"github.com/drizzle-lang/drizzle/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/drizzle-lang/drizzle/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/drizzle-lang/drizzle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"drizzle/lexer.cr","line_number":7,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/lexer.cr"}],"repository_name":"github.com/drizzle-lang/drizzle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle","kind":"module","full_name":"Drizzle","name":"Drizzle"},"doc":"The Lexer is the class in charge of reading in input from a file and converting the text into tokens.\n\nIt works similarly to a Python generator, with the `#get_next_token` method generating the next token from the source file.","summary":"<p>The Lexer is the class in charge of reading in input from a file and converting the text into tokens.</p>","class_methods":[],"constructors":[{"id":"new(input:String)-class-method","html_id":"new(input:String)-class-method","name":"new","doc":"Create a Lexer instance using a String.\nThis string will be split on newline characters and turned into an array of lines, as if it had come from a File.\n\nSince this should only be called from the REPL, the file_name will be \"<stdin>\".","summary":"<p>Create a Lexer instance using a String.</p>","abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"String"}],"args_string":"(input : String)","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/lexer.cr#L20","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/lexer.cr#L20","def":{"name":"new","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(input)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(file:File)-class-method","html_id":"new(file:File)-class-method","name":"new","doc":"Create a Lexer instance using a File instance.\n\nThis will replace the filename and load the lines in to use as input.","summary":"<p>Create a Lexer instance using a File instance.</p>","abstract":false,"args":[{"name":"file","doc":null,"default_value":"","external_name":"file","restriction":"File"}],"args_string":"(file : File)","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/lexer.cr#L31","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/lexer.cr#L31","def":{"name":"new","args":[{"name":"file","doc":null,"default_value":"","external_name":"file","restriction":"File"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(file)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"get_next_token:Token-instance-method","html_id":"get_next_token:Token-instance-method","name":"get_next_token","doc":"Generate the next Token instance from the given input.\n\nThis method first tries the current_char of the Lexer against all of the single character Tokens in Drizzle.\nIf it does not match, it then attempts to build up identifiers / keywords or numbers, depending on what the character is.","summary":"<p>Generate the next Token instance from the given input.</p>","abstract":false,"args":[],"args_string":" : Token","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/lexer.cr#L87","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/lexer.cr#L87","def":{"name":"get_next_token","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Token","visibility":"Public","body":"self.skip_whitespace\nif @current_char == '#'\n  self.skip_comment\nend\ncurrent_line = @line_num + 1\ncurrent_char = @char_num + 1\ntoken_type : TokenType\nliteral : String\nno_read = false\ncase @current_char\nwhen '\\n'\n  token_type = TokenType::EOL\n  literal = \"\\n\"\n  current_line = current_line - 1\n  current_char = @lines[current_line - 1].size + 1\nwhen '='\n  if self.peek_next_char == '='\n    token_type = TokenType::EQ\n    literal = \"==\"\n    self.read_next_char\n  else\n    token_type = TokenType::ASSIGN\n    literal = \"=\"\n  end\nwhen '+'\n  token_type = TokenType::PLUS\n  literal = \"+\"\nwhen '-'\n  if self.peek_next_char == '>'\n    token_type = TokenType::RETURN_TYPE\n    literal = \"->\"\n    self.read_next_char\n  else\n    token_type = TokenType::MINUS\n    literal = \"-\"\n  end\nwhen '*'\n  token_type = TokenType::ASTERISK\n  literal = \"*\"\nwhen '/'\n  token_type = TokenType::SLASH\n  literal = \"/\"\nwhen '<'\n  if self.peek_next_char == '='\n    token_type = TokenType::LT_EQ\n    literal = \"<=\"\n    self.read_next_char\n  else\n    token_type = TokenType::LT\n    literal = \"<\"\n  end\nwhen '>'\n  if self.peek_next_char == '='\n    token_type = TokenType::GT_EQ\n    literal = \">=\"\n    self.read_next_char\n  else\n    token_type = TokenType::GT\n    literal = \">\"\n  end\nwhen ','\n  token_type = TokenType::COMMA\n  literal = \",\"\nwhen ':'\n  token_type = TokenType::COLON\n  literal = \":\"\nwhen '('\n  token_type = TokenType::LEFT_PAREN\n  literal = \"(\"\nwhen ')'\n  token_type = TokenType::RIGHT_PAREN\n  literal = \")\"\nwhen '{'\n  token_type = TokenType::LEFT_BRACE\n  literal = \"{\"\nwhen '}'\n  token_type = TokenType::RIGHT_BRACE\n  literal = \"}\"\nwhen '!'\n  if self.peek_next_char == '='\n    token_type = TokenType::NOT_EQ\n    literal = \"!=\"\n    self.read_next_char\n  else\n    token_type = TokenType::ILLEGAL\n    literal = Char::ZERO.to_s\n  end\nwhen Char::ZERO\n  token_type = TokenType::EOF\n  literal = Char::ZERO.to_s\n  current_line = current_line - 1\nelse\n  if @current_char.letter?\n    literal = self.read_identifier\n    token_type = Drizzle::Keywords.fetch(literal, TokenType::IDENTIFIER)\n    no_read = true\n  else\n    if @current_char.number?\n      literal = self.read_number\n      token_type = TokenType::INTEGER\n      no_read = true\n    else\n      token_type = TokenType::ILLEGAL\n      literal = Char::ZERO.to_s\n    end\n  end\nend\nif no_read\nelse\n  self.read_next_char\nend\nreturn Token.new(token_type, literal, @file_name, current_line, current_char)\n"}},{"id":"peek_next_char:Char-instance-method","html_id":"peek_next_char:Char-instance-method","name":"peek_next_char","doc":"Check what the next character on the current line is, without updating all the pointers","summary":"<p>Check what the next character on the current line is, without updating all the pointers</p>","abstract":false,"args":[],"args_string":" : Char","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/lexer.cr#L75","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/lexer.cr#L75","def":{"name":"peek_next_char","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Char","visibility":"Public","body":"if @read_char_num >= @current_line.size\n  return Char::ZERO\nelse\n  return @current_line[@read_char_num]\nend"}},{"id":"read_identifier:String-instance-method","html_id":"read_identifier:String-instance-method","name":"read_identifier","doc":"Builds up a possible identifier from the source.\n\nThis method is run whenever `#get_next_token` comes across a letter in the input.","summary":"<p>Builds up a possible identifier from the source.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/lexer.cr#L218","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/lexer.cr#L218","def":{"name":"read_identifier","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"start_pos = @char_num\nline_num = @line_num\nend_pos = @char_num\nwhile (line_num == @line_num) && (self.valid_identifier_char?(@current_char))\n  self.read_next_char\n  end_pos = end_pos + 1\nend\nreturn @lines[line_num][start_pos...end_pos]\n"}},{"id":"read_next_char-instance-method","html_id":"read_next_char-instance-method","name":"read_next_char","doc":"Update the `char_num` and `read_char_num` pointers, as well as the `current_line` and `current_char` values.\nIf the end of the current line has been reached, move to the next line (if exists).\nIf the end of the input has been reached, set the current char to be the `Char::ZERO`.","summary":"<p>Update the <code>char_num</code> and <code>read_char_num</code> pointers, as well as the <code>current_line</code> and <code>current_char</code> values.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/lexer.cr#L44","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/lexer.cr#L44","def":{"name":"read_next_char","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @read_char_num >= @current_line.size\n  @line_num = @line_num + 1\n  @char_num = 0\n  @read_char_num = 0\n  if @line_num > @lines.size\n    @current_line = Char::ZERO.to_s\n    @current_char = Char::ZERO\n  else\n    if @line_num == @lines.size\n      @current_line = \"\"\n      @current_char = '\\n'\n    else\n      @current_line = @lines[@line_num]\n      @current_char = '\\n'\n    end\n  end\nelse\n  @current_char = @current_line[@read_char_num]\n  @char_num = @read_char_num\n  @read_char_num = @read_char_num + 1\nend"}},{"id":"read_number:String-instance-method","html_id":"read_number:String-instance-method","name":"read_number","doc":"Builds up an integer number from the source code.\n\nThe interpreter book only handles integer numbers when I move to creating an ANTLR parser then Drizzle will have other number types too :D\nThe number is returned as a String still, to keep Token implementation simple","summary":"<p>Builds up an integer number from the source code.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/lexer.cr#L236","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/lexer.cr#L236","def":{"name":"read_number","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"start_pos = @char_num\nline_num = @line_num\nend_pos = @char_num\nwhile (line_num == @line_num) && @current_char.number?\n  self.read_next_char\n  end_pos = end_pos + 1\nend\nreturn @lines[line_num][start_pos...end_pos]\n"}},{"id":"skip_comment-instance-method","html_id":"skip_comment-instance-method","name":"skip_comment","doc":"Once a comment is found in the source, skip the lexer to the next line.\n\nIn Drizzle, there are currently only single line comments, so we can just skip the line.","summary":"<p>Once a comment is found in the source, skip the lexer to the next line.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/lexer.cr#L263","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/lexer.cr#L263","def":{"name":"skip_comment","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@read_char_num = @current_line.size\nself.read_next_char\nself.skip_whitespace\n"}},{"id":"skip_whitespace-instance-method","html_id":"skip_whitespace-instance-method","name":"skip_whitespace","doc":"Skip whitespace characters in the input as it is unnecessary to turn them into Tokens for Drizzle\n\nWhitespace characters include spaces, newlines, tabs, carriage returns, etc.","summary":"<p>Skip whitespace characters in the input as it is unnecessary to turn them into Tokens for Drizzle</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/lexer.cr#L253","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/lexer.cr#L253","def":{"name":"skip_whitespace","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"whitespace_chars = [' ', '\\r', '\\t']\nwhile whitespace_chars.includes?(@current_char)\n  self.read_next_char\nend\n"}},{"id":"valid_identifier_char?(char:Char):Bool-instance-method","html_id":"valid_identifier_char?(char:Char):Bool-instance-method","name":"valid_identifier_char?","doc":"Determine whether a given character is allowed to be used as part of an identifier name.\n\nSince the `#read_identifier` method is only run when the `#get_next_token` finds a letter, we can safely allow numbers in this as well.","summary":"<p>Determine whether a given character is allowed to be used as part of an identifier name.</p>","abstract":false,"args":[{"name":"char","doc":null,"default_value":"","external_name":"char","restriction":"Char"}],"args_string":"(char : Char) : Bool","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/lexer.cr#L274","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/lexer.cr#L274","def":{"name":"valid_identifier_char?","args":[{"name":"char","doc":null,"default_value":"","external_name":"char","restriction":"Char"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"extra_chars = ['?', '!', '_']\nreturn char.alphanumeric? || (extra_chars.includes?(char))\n"}}],"macros":[],"types":[]},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/Parser","path":"Drizzle/Parser.html","kind":"class","full_name":"Drizzle::Parser","name":"Parser","abstract":false,"superclass":{"html_id":"github.com/drizzle-lang/drizzle/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/drizzle-lang/drizzle/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/drizzle-lang/drizzle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"drizzle/parser.cr","line_number":65,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr"}],"repository_name":"github.com/drizzle-lang/drizzle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle","kind":"module","full_name":"Drizzle","name":"Drizzle"},"doc":"A Parser reads in the tokens generated by a `Lexer` and constructs an Abstract Syntax Tree (AST) built from what it finds.","summary":"<p>A Parser reads in the tokens generated by a <code><a href=\"../Drizzle/Lexer.html\">Lexer</a></code> and constructs an Abstract Syntax Tree (AST) built from what it finds.</p>","class_methods":[],"constructors":[{"id":"new(lexer:Lexer)-class-method","html_id":"new(lexer:Lexer)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"lexer","doc":null,"default_value":"","external_name":"lexer","restriction":"Lexer"}],"args_string":"(lexer : Lexer)","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L73","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L73","def":{"name":"new","args":[{"name":"lexer","doc":null,"default_value":"","external_name":"lexer","restriction":"Lexer"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(lexer)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"current:Drizzle::Token-instance-method","html_id":"current:Drizzle::Token-instance-method","name":"current","doc":"The token that is currently being inspected by the parser","summary":"<p>The token that is currently being inspected by the parser</p>","abstract":false,"args":[],"args_string":" : Drizzle::Token","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L530","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L530","def":{"name":"current","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@current"}},{"id":"eat?(expected_type:TokenType):Bool-instance-method","html_id":"eat?(expected_type:TokenType):Bool-instance-method","name":"eat?","doc":"\"Eat\" the `@peek` token if the expected type matches the type of `@peek`\n\nEating a token involves passing in the type of token that `@peek` is expected to be.\nIf it is the expected type, this method will advance the parser to the next token","summary":"<p>\"Eat\" the <code>@peek</code> token if the expected type matches the type of <code>@peek</code></p>","abstract":false,"args":[{"name":"expected_type","doc":null,"default_value":"","external_name":"expected_type","restriction":"TokenType"}],"args_string":"(expected_type : TokenType) : Bool","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L510","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L510","def":{"name":"eat?","args":[{"name":"expected_type","doc":null,"default_value":"","external_name":"expected_type","restriction":"TokenType"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if @peek.token_type == expected_type\n  self.next_token\n  return true\nelse\n  self.eat_error(expected_type)\n  return false\nend"}},{"id":"eat_error(expected_type:TokenType)-instance-method","html_id":"eat_error(expected_type:TokenType)-instance-method","name":"eat_error","doc":"Add an error when `#eat?` gets an incorrect token type","summary":"<p>Add an error when <code><a href=\"../Drizzle/Parser.html#eat%3F%28expected_type%3ATokenType%29%3ABool-instance-method\">#eat?</a></code> gets an incorrect token type</p>","abstract":false,"args":[{"name":"expected_type","doc":null,"default_value":"","external_name":"expected_type","restriction":"TokenType"}],"args_string":"(expected_type : TokenType)","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L523","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L523","def":{"name":"eat_error","args":[{"name":"expected_type","doc":null,"default_value":"","external_name":"expected_type","restriction":"TokenType"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@errors << \"SyntaxError: Expected #{expected_type}, got #{@peek.token_type}\\n\\t#{@peek.file_name} at line #{@peek.line_num}, char #{@peek.char_num}\""}},{"id":"errors:Array(String)-instance-method","html_id":"errors:Array(String)-instance-method","name":"errors","doc":"Maintain an array of errors that are generated during the parsing step","summary":"<p>Maintain an array of errors that are generated during the parsing step</p>","abstract":false,"args":[],"args_string":" : Array(String)","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L537","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L537","def":{"name":"errors","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@errors"}},{"id":"initialise_parsers-instance-method","html_id":"initialise_parsers-instance-method","name":"initialise_parsers","doc":"Initialize parser methods for the parser to use when parsing expressions","summary":"<p>Initialize parser methods for the parser to use when parsing expressions</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L85","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L85","def":{"name":"initialise_parsers","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"add_prefix(IDENTIFIER, parse_identifier)\nadd_prefix(INTEGER, parse_integer_literal)\nadd_prefix(NOT, parse_prefix_expression)\nadd_prefix(MINUS, parse_prefix_expression)\nadd_prefix(TRUE, parse_boolean_literal)\nadd_prefix(FALSE, parse_boolean_literal)\nadd_prefix(LEFT_PAREN, parse_grouped_expression)\nadd_infix(PLUS, parse_infix_expression)\nadd_infix(MINUS, parse_infix_expression)\nadd_infix(ASTERISK, parse_infix_expression)\nadd_infix(SLASH, parse_infix_expression)\nadd_infix(EQ, parse_infix_expression)\nadd_infix(NOT_EQ, parse_infix_expression)\nadd_infix(LT, parse_infix_expression)\nadd_infix(GT, parse_infix_expression)\nadd_infix(LEFT_PAREN, parse_call_expression)\n"}},{"id":"next_token-instance-method","html_id":"next_token-instance-method","name":"next_token","doc":"Update the `@current` and `@peek` pointers contained in the Parser instance to the next token generated from the `Lexer`","summary":"<p>Update the <code>@current</code> and <code>@peek</code> pointers contained in the Parser instance to the next token generated from the <code><a href=\"../Drizzle/Lexer.html\">Lexer</a></code></p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L118","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L118","def":{"name":"next_token","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@current = @peek\n@peek = @lexer.get_next_token\n"}},{"id":"parse_block_statement:AST::BlockStatement?-instance-method","html_id":"parse_block_statement:AST::BlockStatement?-instance-method","name":"parse_block_statement","doc":"Attempt to parse a block statement found at the current token, returning the node if possible, or nil if not","summary":"<p>Attempt to parse a block statement found at the current token, returning the node if possible, or nil if not</p>","abstract":false,"args":[],"args_string":" : AST::BlockStatement?","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L300","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L300","def":{"name":"parse_block_statement","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"AST::BlockStatement | ::Nil","visibility":"Public","body":"token = @current\nstmnts = [] of AST::Statement\nself.next_token\nwhile !(@current.token_type.right_brace? || @current.token_type.eof?)\n  stmnt = self.parse_statement\n  if !stmnt.nil?\n    stmnts << stmnt\n  end\n  self.next_token\n  while @current.token_type.eol?\n    self.next_token\n  end\nend\nreturn AST::BlockStatement.new(token, stmnts)\n"}},{"id":"parse_boolean_literal:AST::Expression-instance-method","html_id":"parse_boolean_literal:AST::Expression-instance-method","name":"parse_boolean_literal","doc":"Parse a boolean found at the current token\n`boolean`","summary":"<p>Parse a boolean found at the current token <code>boolean</code></p>","abstract":false,"args":[],"args_string":" : AST::Expression","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L423","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L423","def":{"name":"parse_boolean_literal","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"AST::Expression","visibility":"Public","body":"return AST::BooleanLiteral.new(@current, @current.token_type.true?)"}},{"id":"parse_call_arguments:Array(AST::Expression)-instance-method","html_id":"parse_call_arguments:Array(AST::Expression)-instance-method","name":"parse_call_arguments","doc":"Parse an argument list for a call expression\n`(expression*)`","summary":"<p>Parse an argument list for a call expression <code>(expression*)</code></p>","abstract":false,"args":[],"args_string":" : Array(AST::Expression)","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L469","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L469","def":{"name":"parse_call_arguments","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(AST::Expression)","visibility":"Public","body":"args = [] of AST::Expression\nif @peek.token_type.right_paren?\n  self.next_token\n  return args\nend\nself.next_token\nexp = self.parse_expression(Precedence::LOWEST)\nif exp.nil?\n  return [] of AST::Expression\nelse\n  args << exp\nend\nwhile @peek.token_type.comma?\n  self.next_token\n  self.next_token\n  exp = self.parse_expression(Precedence::LOWEST)\n  if exp.nil?\n    return [] of AST::Expression\n  else\n    args << exp\n  end\nend\nif !(self.eat?(TokenType::RIGHT_PAREN))\n  return [] of AST::Expression\nend\nreturn args\n"}},{"id":"parse_call_expression(left:AST::Expression):AST::Expression-instance-method","html_id":"parse_call_expression(left:AST::Expression):AST::Expression-instance-method","name":"parse_call_expression","doc":"Parse a call expression found at the current token\n`identifier argument_list`","summary":"<p>Parse a call expression found at the current token <code>identifier argument_list</code></p>","abstract":false,"args":[{"name":"left","doc":null,"default_value":"","external_name":"left","restriction":"AST::Expression"}],"args_string":"(left : AST::Expression) : AST::Expression","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L461","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L461","def":{"name":"parse_call_expression","args":[{"name":"left","doc":null,"default_value":"","external_name":"left","restriction":"AST::Expression"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"AST::Expression","visibility":"Public","body":"token = @current\narguments = self.parse_call_arguments\nreturn AST::CallExpression.new(token, left.as(AST::Identifier), arguments)\n"}},{"id":"parse_expression(precedence:Precedence):AST::Expression?-instance-method","html_id":"parse_expression(precedence:Precedence):AST::Expression?-instance-method","name":"parse_expression","doc":"Attempt to parse an expression.\nThis method is given a current precedence to compare against when necessary.","summary":"<p>Attempt to parse an expression.</p>","abstract":false,"args":[{"name":"precedence","doc":null,"default_value":"","external_name":"precedence","restriction":"Precedence"}],"args_string":"(precedence : Precedence) : AST::Expression?","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L370","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L370","def":{"name":"parse_expression","args":[{"name":"precedence","doc":null,"default_value":"","external_name":"precedence","restriction":"Precedence"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"AST::Expression | ::Nil","visibility":"Public","body":"prefix_parser = @prefix_parsers.fetch(@current.token_type, nil)\nif prefix_parser.nil?\n  @errors << \"SyntaxError: No prefix parser function found for #{@current.token_type}\\n\\t#{@current.file_name} at line #{@current.line_num}, char #{@current.char_num}\"\n  return nil\nend\nleft_exp = prefix_parser.not_nil!.call\nwhile (!@peek.token_type.eol?) && precedence.value < (PrecedenceMap.fetch(@peek.token_type, Precedence::LOWEST)).value\n  infix_parser = @infix_parsers.fetch(@peek.token_type, nil)\n  if infix_parser.nil?\n    return left_exp\n  end\n  self.next_token\n  left_exp = (infix_parser.not_nil!.call(left_exp.not_nil!)).not_nil!\nend\nreturn left_exp\n"}},{"id":"parse_expression_statement:AST::ExpressionStatement?-instance-method","html_id":"parse_expression_statement:AST::ExpressionStatement?-instance-method","name":"parse_expression_statement","doc":"Attempt to parse an expression statement found at the current token, returning the node if possible, or nil if not","summary":"<p>Attempt to parse an expression statement found at the current token, returning the node if possible, or nil if not</p>","abstract":false,"args":[],"args_string":" : AST::ExpressionStatement?","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L362","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L362","def":{"name":"parse_expression_statement","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"AST::ExpressionStatement | ::Nil","visibility":"Public","body":"token = @current\nexpression = self.parse_expression(Precedence::LOWEST)\nreturn AST::ExpressionStatement.new(token, expression)\n"}},{"id":"parse_function:AST::Function?-instance-method","html_id":"parse_function:AST::Function?-instance-method","name":"parse_function","doc":"Attempt to parse a function found at the current token, returning the node if possible, or nil if not\n`def name((name: type)*) -> type block`","summary":"<p>Attempt to parse a function found at the current token, returning the node if possible, or nil if not <code>def name((name: type)*) -> type block</code></p>","abstract":false,"args":[],"args_string":" : AST::Function?","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L268","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L268","def":{"name":"parse_function","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"AST::Function | ::Nil","visibility":"Public","body":"token = @current\neat_or_return_nil(IDENTIFIER)\nname = AST::Identifier.new(@current, @current.literal)\neat_or_return_nil(LEFT_PAREN)\nparams = self.parse_function_parameters\nif params.nil?\n  return nil\nend\nreturn_type : AST::Identifier | ::Nil = nil\nif @peek.token_type.return_type?\n  eat_or_return_nil(RETURN_TYPE)\n  eat_or_return_nil(IDENTIFIER)\n  return_type = AST::Identifier.new(@current, @current.literal)\nend\neat_or_return_nil(LEFT_BRACE)\nbody = self.parse_block_statement\nreturn AST::Function.new(token, name, params, return_type, body)\n"}},{"id":"parse_function_parameters:Array(AST::TypedIdentifier)?-instance-method","html_id":"parse_function_parameters:Array(AST::TypedIdentifier)?-instance-method","name":"parse_function_parameters","doc":"Parse the parameter list for a function and return an array of `AST::TypedIdentifier` instances representing the parameters","summary":"<p>Parse the parameter list for a function and return an array of <code><a href=\"../Drizzle/AST/TypedIdentifier.html\">AST::TypedIdentifier</a></code> instances representing the parameters</p>","abstract":false,"args":[],"args_string":" : Array(AST::TypedIdentifier)?","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L323","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L323","def":{"name":"parse_function_parameters","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(AST::TypedIdentifier) | ::Nil","visibility":"Public","body":"params = [] of AST::TypedIdentifier\nif @peek.token_type.right_paren?\n  self.next_token\n  return params\nend\nself.next_token\nparam = self.parse_typed_identifier\nif param.nil?\n  return nil\nend\nparams << param\nwhile @peek.token_type.comma?\n  self.next_token\n  self.next_token\n  param = self.parse_typed_identifier\n  if param.nil?\n    return nil\n  end\n  params << param\nend\neat_or_return_nil(RIGHT_PAREN)\nreturn params\n"}},{"id":"parse_grouped_expression:AST::Expression?-instance-method","html_id":"parse_grouped_expression:AST::Expression?-instance-method","name":"parse_grouped_expression","doc":"Parse a grouped expression found at the current token\n`(expression)`","summary":"<p>Parse a grouped expression found at the current token <code>(expression)</code></p>","abstract":false,"args":[],"args_string":" : AST::Expression?","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L439","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L439","def":{"name":"parse_grouped_expression","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"AST::Expression | ::Nil","visibility":"Public","body":"self.next_token\nexp = self.parse_expression(Precedence::LOWEST)\neat_or_return_nil(RIGHT_PAREN)\nreturn exp\n"}},{"id":"parse_identifier:AST::Expression-instance-method","html_id":"parse_identifier:AST::Expression-instance-method","name":"parse_identifier","doc":"Parse an identifier found at the current token\n`name`","summary":"<p>Parse an identifier found at the current token <code>name</code></p>","abstract":false,"args":[],"args_string":" : AST::Expression","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L399","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L399","def":{"name":"parse_identifier","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"AST::Expression","visibility":"Public","body":"return AST::Identifier.new(@current, @current.literal)"}},{"id":"parse_if_statement(check_alternatives:Bool=true):AST::IfStatement?-instance-method","html_id":"parse_if_statement(check_alternatives:Bool=true):AST::IfStatement?-instance-method","name":"parse_if_statement","doc":"Attempt to parse an 'if' statement found at the current token, returning the node if possible, or nil if not.\n\nThe `check_alternatives` flag states whether the current call should check for `elsif` and `else` tokens. We can use this to parse `elsif` blocks recursively.","summary":"<p>Attempt to parse an 'if' statement found at the current token, returning the node if possible, or nil if not.</p>","abstract":false,"args":[{"name":"check_alternatives","doc":null,"default_value":"true","external_name":"check_alternatives","restriction":"Bool"}],"args_string":"(check_alternatives : Bool = <span class=\"n\">true</span>) : AST::IfStatement?","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L215","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L215","def":{"name":"parse_if_statement","args":[{"name":"check_alternatives","doc":null,"default_value":"true","external_name":"check_alternatives","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"AST::IfStatement | ::Nil","visibility":"Public","body":"token = @current\neat_or_return_nil(LEFT_PAREN)\nself.next_token\ncondition = (self.parse_expression(Precedence::LOWEST)).not_nil!\neat_or_return_nil(RIGHT_PAREN)\neat_or_return_nil(LEFT_BRACE)\nconsequence = self.parse_block_statement\nif !check_alternatives\n  return AST::IfStatement.new(token, condition, consequence)\nend\nalt_consequences = [] of AST::IfStatement\nalt : AST::BlockStatement | ::Nil = nil\nif @peek.token_type.elsif?\n  self.next_token\n  while @current.token_type.elsif?\n    alt_stmnt = self.parse_if_statement(false)\n    if !alt_stmnt.nil?\n      alt_consequences << alt_stmnt\n    end\n  end\nend\nif @peek.token_type.else?\n  self.next_token\n  eat_or_return_nil(LEFT_BRACE)\n  alt = self.parse_block_statement\nend\nreturn AST::IfStatement.new(token, condition, consequence, alt_consequences, alt)\n"}},{"id":"parse_infix_expression(left:AST::Expression):AST::Expression-instance-method","html_id":"parse_infix_expression(left:AST::Expression):AST::Expression-instance-method","name":"parse_infix_expression","doc":"Parse an infix expression found at the current token\n`expression operator expression`","summary":"<p>Parse an infix expression found at the current token <code>expression operator expression</code></p>","abstract":false,"args":[{"name":"left","doc":null,"default_value":"","external_name":"left","restriction":"AST::Expression"}],"args_string":"(left : AST::Expression) : AST::Expression","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L450","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L450","def":{"name":"parse_infix_expression","args":[{"name":"left","doc":null,"default_value":"","external_name":"left","restriction":"AST::Expression"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"AST::Expression","visibility":"Public","body":"token = @current\noperator = @current.literal\nprecedence = PrecedenceMap.fetch(@current.token_type, Precedence::LOWEST)\nself.next_token\nright = self.parse_expression(precedence)\nreturn AST::InfixExpression.new(token, left, operator, right)\n"}},{"id":"parse_integer_literal:AST::Expression-instance-method","html_id":"parse_integer_literal:AST::Expression-instance-method","name":"parse_integer_literal","doc":"Parse an integer found at the current token\n`integer`","summary":"<p>Parse an integer found at the current token <code>integer</code></p>","abstract":false,"args":[],"args_string":" : AST::Expression","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L416","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L416","def":{"name":"parse_integer_literal","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"AST::Expression","visibility":"Public","body":"return AST::IntegerLiteral.new(@current, @current.literal.to_i64)"}},{"id":"parse_let_statement:AST::Let?-instance-method","html_id":"parse_let_statement:AST::Let?-instance-method","name":"parse_let_statement","doc":"Attempt to parse a `let` statement found at the current token, returning the node if possible, or nil if not","summary":"<p>Attempt to parse a <code>let</code> statement found at the current token, returning the node if possible, or nil if not</p>","abstract":false,"args":[],"args_string":" : AST::Let?","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L163","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L163","def":{"name":"parse_let_statement","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"AST::Let | ::Nil","visibility":"Public","body":"token = @current\neat_or_return_nil(IDENTIFIER)\nname_token = @current\neat_or_return_nil(COLON)\neat_or_return_nil(IDENTIFIER)\ndatatype = AST::Identifier.new(@current, @current.literal)\nname = AST::TypedIdentifier.new(name_token, name_token.literal, datatype)\neat_or_return_nil(ASSIGN)\nself.next_token\nexpression = self.parse_expression(Precedence::LOWEST)\nif expression.nil?\n  return nil\nend\nreturn AST::Let.new(token, name, expression)\n"}},{"id":"parse_prefix_expression:AST::Expression-instance-method","html_id":"parse_prefix_expression:AST::Expression-instance-method","name":"parse_prefix_expression","doc":"Parse a prefix expression found at the current token\n`operator expression`","summary":"<p>Parse a prefix expression found at the current token <code>operator expression</code></p>","abstract":false,"args":[],"args_string":" : AST::Expression","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L429","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L429","def":{"name":"parse_prefix_expression","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"AST::Expression","visibility":"Public","body":"token = @current\noperator = @current.literal\nself.next_token\nright = self.parse_expression(Precedence::PREFIX)\nreturn AST::PrefixExpression.new(token, operator, right)\n"}},{"id":"parse_program:AST::Program-instance-method","html_id":"parse_program:AST::Program-instance-method","name":"parse_program","doc":"Parse a program and build a program node from it, and return it","summary":"<p>Parse a program and build a program node from it, and return it</p>","abstract":false,"args":[],"args_string":" : AST::Program","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L124","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L124","def":{"name":"parse_program","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"AST::Program","visibility":"Public","body":"statements = [] of AST::Statement\nwhile !@current.token_type.eof?\n  statement = self.parse_statement\n  if !statement.nil?\n    statements << statement\n  end\n  self.next_token\nend\nreturn AST::Program.new(statements)\n"}},{"id":"parse_return_statement:AST::Return?-instance-method","html_id":"parse_return_statement:AST::Return?-instance-method","name":"parse_return_statement","doc":"Attempt to parse a `return` statement found at the current token, returning the node if possible, or nil if not","summary":"<p>Attempt to parse a <code>return</code> statement found at the current token, returning the node if possible, or nil if not</p>","abstract":false,"args":[],"args_string":" : AST::Return?","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L197","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L197","def":{"name":"parse_return_statement","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"AST::Return | ::Nil","visibility":"Public","body":"token = @current\nself.next_token\nexpression : AST::Expression | ::Nil = nil\nif !@current.token_type.eol?\n  expression = self.parse_expression(Precedence::LOWEST)\nend\nreturn AST::Return.new(token, expression)\n"}},{"id":"parse_statement:AST::Statement?-instance-method","html_id":"parse_statement:AST::Statement?-instance-method","name":"parse_statement","doc":"Parse a statement found at `@current` and return it, or nil if no statement can be parsed","summary":"<p>Parse a statement found at <code>@current</code> and return it, or nil if no statement can be parsed</p>","abstract":false,"args":[],"args_string":" : AST::Statement?","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L137","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L137","def":{"name":"parse_statement","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"AST::Statement | ::Nil","visibility":"Public","body":"while @current.token_type.eol?\n  self.next_token\nend\nif @current.token_type.eof?\n  return nil\nend\ncase @current.token_type\nwhen .let?\n  return self.parse_let_statement\nwhen .return?\n  return self.parse_return_statement\nwhen .if?\n  return self.parse_if_statement\nwhen .function?\n  return self.parse_function\nend\nreturn self.parse_expression_statement\n"}},{"id":"parse_typed_identifier:AST::TypedIdentifier?-instance-method","html_id":"parse_typed_identifier:AST::TypedIdentifier?-instance-method","name":"parse_typed_identifier","doc":"Parse a typed identifier found at the current token\n`name: datatype`","summary":"<p>Parse a typed identifier found at the current token <code>name: datatype</code></p>","abstract":false,"args":[],"args_string":" : AST::TypedIdentifier?","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L405","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L405","def":{"name":"parse_typed_identifier","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"AST::TypedIdentifier | ::Nil","visibility":"Public","body":"name = @current\neat_or_return_nil(COLON)\nself.next_token\ndatatype = AST::Identifier.new(@current, @current.literal)\nreturn AST::TypedIdentifier.new(name, name.literal, datatype)\n"}},{"id":"peek:Drizzle::Token-instance-method","html_id":"peek:Drizzle::Token-instance-method","name":"peek","doc":"A pointer to the next token coming up in the stream.\nThis is used to help guide what kind of node will be built from `@current`","summary":"<p>A pointer to the next token coming up in the stream.</p>","abstract":false,"args":[],"args_string":" : Drizzle::Token","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L534","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L534","def":{"name":"peek","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@peek"}},{"id":"register_infix(token_type:TokenType,func:InfixParser)-instance-method","html_id":"register_infix(token_type:TokenType,func:InfixParser)-instance-method","name":"register_infix","doc":"Register a TokenType with a parser function that is run when the TokenType is discovered in a spot for infix notation","summary":"<p>Register a TokenType with a parser function that is run when the TokenType is discovered in a spot for infix notation</p>","abstract":false,"args":[{"name":"token_type","doc":null,"default_value":"","external_name":"token_type","restriction":"TokenType"},{"name":"func","doc":null,"default_value":"","external_name":"func","restriction":"InfixParser"}],"args_string":"(token_type : TokenType, func : InfixParser)","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L113","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L113","def":{"name":"register_infix","args":[{"name":"token_type","doc":null,"default_value":"","external_name":"token_type","restriction":"TokenType"},{"name":"func","doc":null,"default_value":"","external_name":"func","restriction":"InfixParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@infix_parsers[token_type] = func"}},{"id":"register_prefix(token_type:TokenType,func:PrefixParser)-instance-method","html_id":"register_prefix(token_type:TokenType,func:PrefixParser)-instance-method","name":"register_prefix","doc":"Register a TokenType with a parser function that is run when the TokenType is discovered in a spot for prefix notation","summary":"<p>Register a TokenType with a parser function that is run when the TokenType is discovered in a spot for prefix notation</p>","abstract":false,"args":[{"name":"token_type","doc":null,"default_value":"","external_name":"token_type","restriction":"TokenType"},{"name":"func","doc":null,"default_value":"","external_name":"func","restriction":"PrefixParser"}],"args_string":"(token_type : TokenType, func : PrefixParser)","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L108","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L108","def":{"name":"register_prefix","args":[{"name":"token_type","doc":null,"default_value":"","external_name":"token_type","restriction":"TokenType"},{"name":"func","doc":null,"default_value":"","external_name":"func","restriction":"PrefixParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@prefix_parsers[token_type] = func"}}],"macros":[],"types":[]},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/Precedence","path":"Drizzle/Precedence.html","kind":"enum","full_name":"Drizzle::Precedence","name":"Precedence","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/drizzle-lang/drizzle/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"github.com/drizzle-lang/drizzle/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/drizzle-lang/drizzle/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/drizzle-lang/drizzle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"drizzle/parser.cr","line_number":34,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr"}],"repository_name":"github.com/drizzle-lang/drizzle","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"LOWEST","name":"LOWEST","value":"0","doc":"Default","summary":"<p>Default</p>"},{"id":"EQUALS","name":"EQUALS","value":"1","doc":"`==`","summary":"<p><code>==</code></p>"},{"id":"LESSGREATER","name":"LESSGREATER","value":"2","doc":"`>` or `<`","summary":"<p><code>></code> or <code><</code></p>"},{"id":"SUM","name":"SUM","value":"3","doc":"`+` or `-`","summary":"<p><code>+</code> or <code>-</code></p>"},{"id":"PRODUCT","name":"PRODUCT","value":"4","doc":"`*` or `/`","summary":"<p><code>*</code> or <code>/</code></p>"},{"id":"PREFIX","name":"PREFIX","value":"5","doc":"`-x`","summary":"<p><code>-x</code></p>"},{"id":"CALL","name":"CALL","value":"6","doc":"`func(x)`","summary":"<p><code>func(x)</code></p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle","kind":"module","full_name":"Drizzle","name":"Drizzle"},"doc":"Enum representing the precedence order of operators in Drizzle.\nLower precedence operators will have a lower integer value, allowing for easy comparisons between precedences.","summary":"<p>Enum representing the precedence order of operators in Drizzle.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"call?-instance-method","html_id":"call?-instance-method","name":"call?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L48","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L48","def":{"name":"call?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == CALL"}},{"id":"equals?-instance-method","html_id":"equals?-instance-method","name":"equals?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L38","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L38","def":{"name":"equals?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == EQUALS"}},{"id":"lessgreater?-instance-method","html_id":"lessgreater?-instance-method","name":"lessgreater?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L40","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L40","def":{"name":"lessgreater?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == LESSGREATER"}},{"id":"lowest?-instance-method","html_id":"lowest?-instance-method","name":"lowest?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L36","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L36","def":{"name":"lowest?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == LOWEST"}},{"id":"prefix?-instance-method","html_id":"prefix?-instance-method","name":"prefix?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L46","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L46","def":{"name":"prefix?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == PREFIX"}},{"id":"product?-instance-method","html_id":"product?-instance-method","name":"product?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L44","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L44","def":{"name":"product?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == PRODUCT"}},{"id":"sum?-instance-method","html_id":"sum?-instance-method","name":"sum?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L42","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr#L42","def":{"name":"sum?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == SUM"}}],"macros":[],"types":[]},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/PrefixParser","path":"Drizzle/PrefixParser.html","kind":"alias","full_name":"Drizzle::PrefixParser","name":"PrefixParser","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"drizzle/parser.cr","line_number":28,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/parser.cr"}],"repository_name":"github.com/drizzle-lang/drizzle","program":false,"enum":false,"alias":true,"aliased":"Proc((Drizzle::AST::Expression | Nil))","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle","kind":"module","full_name":"Drizzle","name":"Drizzle"},"doc":"# Type alias for Proc objects used in prefix notation parsing","summary":"<h1>Type alias for Proc objects used in prefix notation parsing</h1>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/REPL","path":"Drizzle/REPL.html","kind":"class","full_name":"Drizzle::REPL","name":"REPL","abstract":false,"superclass":{"html_id":"github.com/drizzle-lang/drizzle/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/drizzle-lang/drizzle/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/drizzle-lang/drizzle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"drizzle/repl.cr","line_number":5,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/repl.cr"}],"repository_name":"github.com/drizzle-lang/drizzle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle","kind":"module","full_name":"Drizzle","name":"Drizzle"},"doc":"Class for handling the Read-Eval-Print-Loop (REPL) environment for Drizzle.\n\nCurrently, since we can't exactly 'Eval' yet, the REPL environment simply parses the input and prints back out the string form of the program node made","summary":"<p>Class for handling the Read-Eval-Print-Loop (REPL) environment for Drizzle.</p>","class_methods":[],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":"Start the REPL environment.\n\nREPL ends on an empty input.","summary":"<p>Start the REPL environment.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/repl.cr#L11","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/repl.cr#L11","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"print_parser_errors(parser:Parser)-instance-method","html_id":"print_parser_errors(parser:Parser)-instance-method","name":"print_parser_errors","doc":"Print parser errors in a nice format","summary":"<p>Print parser errors in a nice format</p>","abstract":false,"args":[{"name":"parser","doc":null,"default_value":"","external_name":"parser","restriction":"Parser"}],"args_string":"(parser : Parser)","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/repl.cr#L35","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/repl.cr#L35","def":{"name":"print_parser_errors","args":[{"name":"parser","doc":null,"default_value":"","external_name":"parser","restriction":"Parser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"parser.errors.each do |error|\n  puts(error.colorize(:red))\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/Token","path":"Drizzle/Token.html","kind":"class","full_name":"Drizzle::Token","name":"Token","abstract":false,"superclass":{"html_id":"github.com/drizzle-lang/drizzle/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/drizzle-lang/drizzle/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/drizzle-lang/drizzle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"drizzle/token.cr","line_number":107,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr"}],"repository_name":"github.com/drizzle-lang/drizzle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle","kind":"module","full_name":"Drizzle","name":"Drizzle"},"doc":"A Token is generated by the `Lexer` as it reads in Drizzle source code.\n\nTokens are then used to generate an Abstract Syntax Tree (AST) which can then be used to actually make the language do things.","summary":"<p>A Token is generated by the <code><a href=\"../Drizzle/Lexer.html\">Lexer</a></code> as it reads in Drizzle source code.</p>","class_methods":[],"constructors":[{"id":"new(token_type:TokenType,literal:String,file_name:String=&quot;&lt;stdin&gt;&quot;,line_num:Int32=0,char_num:Int32=0)-class-method","html_id":"new(token_type:TokenType,literal:String,file_name:String=&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;,line_num:Int32=0,char_num:Int32=0)-class-method","name":"new","doc":"Create an instance of a Token.","summary":"<p>Create an instance of a Token.</p>","abstract":false,"args":[{"name":"token_type","doc":null,"default_value":"","external_name":"token_type","restriction":"TokenType"},{"name":"literal","doc":null,"default_value":"","external_name":"literal","restriction":"String"},{"name":"file_name","doc":null,"default_value":"\"<stdin>\"","external_name":"file_name","restriction":"String"},{"name":"line_num","doc":null,"default_value":"0","external_name":"line_num","restriction":"Int32"},{"name":"char_num","doc":null,"default_value":"0","external_name":"char_num","restriction":"Int32"}],"args_string":"(token_type : TokenType, literal : String, file_name : String = <span class=\"s\">&quot;&lt;stdin&gt;&quot;</span>, line_num : Int32 = <span class=\"n\">0</span>, char_num : Int32 = <span class=\"n\">0</span>)","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L116","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L116","def":{"name":"new","args":[{"name":"token_type","doc":null,"default_value":"","external_name":"token_type","restriction":"TokenType"},{"name":"literal","doc":null,"default_value":"","external_name":"literal","restriction":"String"},{"name":"file_name","doc":null,"default_value":"\"<stdin>\"","external_name":"file_name","restriction":"String"},{"name":"line_num","doc":null,"default_value":"0","external_name":"line_num","restriction":"Int32"},{"name":"char_num","doc":null,"default_value":"0","external_name":"char_num","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(token_type, literal, file_name, line_num, char_num)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"char_num:Int32-instance-method","html_id":"char_num:Int32-instance-method","name":"char_num","doc":"The number of the initial character in the string that generated this Token","summary":"<p>The number of the initial character in the string that generated this Token</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L133","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L133","def":{"name":"char_num","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@char_num"}},{"id":"file_name:String-instance-method","html_id":"file_name:String-instance-method","name":"file_name","doc":"The name of the file this Token was generated from","summary":"<p>The name of the file this Token was generated from</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L129","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L129","def":{"name":"file_name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@file_name"}},{"id":"line_num:Int32-instance-method","html_id":"line_num:Int32-instance-method","name":"line_num","doc":"The number of the line in the file that this Token was generated from","summary":"<p>The number of the line in the file that this Token was generated from</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L131","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L131","def":{"name":"line_num","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@line_num"}},{"id":"literal:String-instance-method","html_id":"literal:String-instance-method","name":"literal","doc":"The literal value that was used to generate this Token instance","summary":"<p>The literal value that was used to generate this Token instance</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L127","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L127","def":{"name":"literal","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@literal"}},{"id":"to_s:String-instance-method","html_id":"to_s:String-instance-method","name":"to_s","doc":"Convert the Token instance into a String representation.","summary":"<p>Convert the Token instance into a String representation.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L120","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L120","def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"return \"Token(#{@token_type}, #{@literal}) from #{@file_name}, line #{@line_num}, char #{@char_num}\""}},{"id":"token_type:Drizzle::TokenType-instance-method","html_id":"token_type:Drizzle::TokenType-instance-method","name":"token_type","doc":"The `TokenType` that represents the type of this Token instance","summary":"<p>The <code><a href=\"../Drizzle/TokenType.html\">TokenType</a></code> that represents the type of this Token instance</p>","abstract":false,"args":[],"args_string":" : Drizzle::TokenType","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L125","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L125","def":{"name":"token_type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@token_type"}}],"macros":[],"types":[]},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/TokenType","path":"Drizzle/TokenType.html","kind":"enum","full_name":"Drizzle::TokenType","name":"TokenType","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/drizzle-lang/drizzle/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"github.com/drizzle-lang/drizzle/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/drizzle-lang/drizzle/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/drizzle-lang/drizzle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"drizzle/token.cr","line_number":4,"url":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr"}],"repository_name":"github.com/drizzle-lang/drizzle","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"ILLEGAL","name":"ILLEGAL","value":"0","doc":"Token is generated from a string that Drizzle does not recognise","summary":"<p>Token is generated from a string that Drizzle does not recognise</p>"},{"id":"EOL","name":"EOL","value":"1","doc":"End of line token (usually ignored except for certain cases)","summary":"<p>End of line token (usually ignored except for certain cases)</p>"},{"id":"EOF","name":"EOF","value":"2","doc":"End of file token","summary":"<p>End of file token</p>"},{"id":"IDENTIFIER","name":"IDENTIFIER","value":"3","doc":"Name of variable, function, type, etc","summary":"<p>Name of variable, function, type, etc</p>"},{"id":"INTEGER","name":"INTEGER","value":"4","doc":"Integer literal","summary":"<p>Integer literal</p>"},{"id":"ASSIGN","name":"ASSIGN","value":"5","doc":"Assignment operator for assigning value to a variable","summary":"<p>Assignment operator for assigning value to a variable</p>"},{"id":"RETURN_TYPE","name":"RETURN_TYPE","value":"6","doc":"Return type operator for specifying a functions return type","summary":"<p>Return type operator for specifying a functions return type</p>"},{"id":"PLUS","name":"PLUS","value":"7","doc":"Addition operator for adding two values together","summary":"<p>Addition operator for adding two values together</p>"},{"id":"MINUS","name":"MINUS","value":"8","doc":"Subtraction operator for subtracting numbers.\nAlso the unary negation operator.","summary":"<p>Subtraction operator for subtracting numbers.</p>"},{"id":"ASTERISK","name":"ASTERISK","value":"9","doc":"Star operator used for multiplication, among other potential stuff later on too","summary":"<p>Star operator used for multiplication, among other potential stuff later on too</p>"},{"id":"SLASH","name":"SLASH","value":"10","doc":"Slash operator used for division","summary":"<p>Slash operator used for division</p>"},{"id":"LT","name":"LT","value":"11","doc":"Less than logical operator","summary":"<p>Less than logical operator</p>"},{"id":"GT","name":"GT","value":"12","doc":"Greater than logical operator","summary":"<p>Greater than logical operator</p>"},{"id":"EQ","name":"EQ","value":"13","doc":"Equality logical operator","summary":"<p>Equality logical operator</p>"},{"id":"NOT_EQ","name":"NOT_EQ","value":"14","doc":"Inequality logical operator","summary":"<p>Inequality logical operator</p>"},{"id":"LT_EQ","name":"LT_EQ","value":"15","doc":"Less than or equal to","summary":"<p>Less than or equal to</p>"},{"id":"GT_EQ","name":"GT_EQ","value":"16","doc":"Greater than or equal to","summary":"<p>Greater than or equal to</p>"},{"id":"COMMA","name":"COMMA","value":"17","doc":"Separating of items in a data structure / parameter list / etc.","summary":"<p>Separating of items in a data structure / parameter list / etc.</p>"},{"id":"COLON","name":"COLON","value":"18","doc":"Separating of identifier from type in the case of variables and parameters","summary":"<p>Separating of identifier from type in the case of variables and parameters</p>"},{"id":"LEFT_PAREN","name":"LEFT_PAREN","value":"19","doc":"Opening of parameter lists and tuples, and of general brackets","summary":"<p>Opening of parameter lists and tuples, and of general brackets</p>"},{"id":"RIGHT_PAREN","name":"RIGHT_PAREN","value":"20","doc":"Closing of parameter lists and tuples, and of general brackets","summary":"<p>Closing of parameter lists and tuples, and of general brackets</p>"},{"id":"LEFT_BRACE","name":"LEFT_BRACE","value":"21","doc":"Opening of code blocks i.e. functions, as well as opening of set and dict literals","summary":"<p>Opening of code blocks i.e.</p>"},{"id":"RIGHT_BRACE","name":"RIGHT_BRACE","value":"22","doc":"CLosing of code blocks i.e. functions, as well as closing of set and dict literals","summary":"<p>CLosing of code blocks i.e.</p>"},{"id":"LET","name":"LET","value":"23","doc":"Declaration of a variable","summary":"<p>Declaration of a variable</p>"},{"id":"FUNCTION","name":"FUNCTION","value":"24","doc":"Definition of a function","summary":"<p>Definition of a function</p>"},{"id":"RETURN","name":"RETURN","value":"25","doc":"Return value from a function","summary":"<p>Return value from a function</p>"},{"id":"IF","name":"IF","value":"26","doc":"Conditional statement","summary":"<p>Conditional statement</p>"},{"id":"ELSIF","name":"ELSIF","value":"27","doc":"Elsif","summary":"<p>Elsif</p>"},{"id":"ELSE","name":"ELSE","value":"28","doc":"Else","summary":"<p>Else</p>"},{"id":"NOT","name":"NOT","value":"29","doc":"Logical negation","summary":"<p>Logical negation</p>"},{"id":"TRUE","name":"TRUE","value":"30","doc":"True","summary":"<p>True</p>"},{"id":"FALSE","name":"FALSE","value":"31","doc":"False","summary":"<p>False</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle","kind":"module","full_name":"Drizzle","name":"Drizzle"},"doc":"Enum of the various types of Tokens in the Drizzle language.\nThis enum is used for the creation of `Token` instances, and will use its helper methods to help in the parsing stages also.","summary":"<p>Enum of the various types of Tokens in the Drizzle language.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"assign?-instance-method","html_id":"assign?-instance-method","name":"assign?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L24","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L24","def":{"name":"assign?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == ASSIGN"}},{"id":"asterisk?-instance-method","html_id":"asterisk?-instance-method","name":"asterisk?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L33","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L33","def":{"name":"asterisk?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == ASTERISK"}},{"id":"colon?-instance-method","html_id":"colon?-instance-method","name":"colon?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L57","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L57","def":{"name":"colon?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == COLON"}},{"id":"comma?-instance-method","html_id":"comma?-instance-method","name":"comma?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L55","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L55","def":{"name":"comma?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == COMMA"}},{"id":"else?-instance-method","html_id":"else?-instance-method","name":"else?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L80","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L80","def":{"name":"else?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == ELSE"}},{"id":"elsif?-instance-method","html_id":"elsif?-instance-method","name":"elsif?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L78","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L78","def":{"name":"elsif?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == ELSIF"}},{"id":"eof?-instance-method","html_id":"eof?-instance-method","name":"eof?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L12","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L12","def":{"name":"eof?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == EOF"}},{"id":"eol?-instance-method","html_id":"eol?-instance-method","name":"eol?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L10","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L10","def":{"name":"eol?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == EOL"}},{"id":"eq?-instance-method","html_id":"eq?-instance-method","name":"eq?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L44","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L44","def":{"name":"eq?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == EQ"}},{"id":"false?-instance-method","html_id":"false?-instance-method","name":"false?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L86","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L86","def":{"name":"false?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == FALSE"}},{"id":"function?-instance-method","html_id":"function?-instance-method","name":"function?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L72","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L72","def":{"name":"function?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == FUNCTION"}},{"id":"gt?-instance-method","html_id":"gt?-instance-method","name":"gt?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L42","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L42","def":{"name":"gt?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == GT"}},{"id":"gt_eq?-instance-method","html_id":"gt_eq?-instance-method","name":"gt_eq?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L50","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L50","def":{"name":"gt_eq?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == GT_EQ"}},{"id":"identifier?-instance-method","html_id":"identifier?-instance-method","name":"identifier?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L17","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L17","def":{"name":"identifier?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == IDENTIFIER"}},{"id":"if?-instance-method","html_id":"if?-instance-method","name":"if?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L76","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L76","def":{"name":"if?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == IF"}},{"id":"illegal?-instance-method","html_id":"illegal?-instance-method","name":"illegal?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L8","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L8","def":{"name":"illegal?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == ILLEGAL"}},{"id":"integer?-instance-method","html_id":"integer?-instance-method","name":"integer?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L19","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L19","def":{"name":"integer?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == INTEGER"}},{"id":"left_brace?-instance-method","html_id":"left_brace?-instance-method","name":"left_brace?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L63","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L63","def":{"name":"left_brace?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == LEFT_BRACE"}},{"id":"left_paren?-instance-method","html_id":"left_paren?-instance-method","name":"left_paren?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L59","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L59","def":{"name":"left_paren?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == LEFT_PAREN"}},{"id":"let?-instance-method","html_id":"let?-instance-method","name":"let?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L70","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L70","def":{"name":"let?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == LET"}},{"id":"lt?-instance-method","html_id":"lt?-instance-method","name":"lt?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L40","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L40","def":{"name":"lt?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == LT"}},{"id":"lt_eq?-instance-method","html_id":"lt_eq?-instance-method","name":"lt_eq?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L48","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L48","def":{"name":"lt_eq?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == LT_EQ"}},{"id":"minus?-instance-method","html_id":"minus?-instance-method","name":"minus?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L31","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L31","def":{"name":"minus?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == MINUS"}},{"id":"not?-instance-method","html_id":"not?-instance-method","name":"not?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L82","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L82","def":{"name":"not?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == NOT"}},{"id":"not_eq?-instance-method","html_id":"not_eq?-instance-method","name":"not_eq?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L46","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L46","def":{"name":"not_eq?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == NOT_EQ"}},{"id":"plus?-instance-method","html_id":"plus?-instance-method","name":"plus?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L28","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L28","def":{"name":"plus?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == PLUS"}},{"id":"return?-instance-method","html_id":"return?-instance-method","name":"return?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L74","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L74","def":{"name":"return?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == RETURN"}},{"id":"return_type?-instance-method","html_id":"return_type?-instance-method","name":"return_type?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L26","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L26","def":{"name":"return_type?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == RETURN_TYPE"}},{"id":"right_brace?-instance-method","html_id":"right_brace?-instance-method","name":"right_brace?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L65","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L65","def":{"name":"right_brace?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == RIGHT_BRACE"}},{"id":"right_paren?-instance-method","html_id":"right_paren?-instance-method","name":"right_paren?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L61","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L61","def":{"name":"right_paren?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == RIGHT_PAREN"}},{"id":"slash?-instance-method","html_id":"slash?-instance-method","name":"slash?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L35","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L35","def":{"name":"slash?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == SLASH"}},{"id":"true?-instance-method","html_id":"true?-instance-method","name":"true?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L84","source_link":"https://github.com/drizzle-lang/drizzle/blob/76be61fe505b243351526822011277b3aea07e7e/src/drizzle/token.cr#L84","def":{"name":"true?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == TRUE"}}],"macros":[],"types":[]}]}]}})