crystal_doc_search_index_callback({"repository_name":"github.com/drizzle-lang/drizzle","body":"# Drizzle\n\nDrizzle is my very own programming language, simultaneously developed as a language I would like to use and a never-ending source of things to learn.\n\n## Name\nThis project was originally called *Sapphire*.\nI decided to make an organisation for this project as it would surely consist of multiple projects and I really enjoy having projects grouped into Organisations.\n\nHowever, when I tried to do so, I found that `sapphire` and `sapphire-lang` were both taken in terms of names, and there were a few programming language projects named *Sapphire* on GitHub.\nSo I felt I needed to change the name.\n\nBeing a fan of Pokémon, my first thought was *Kyogre*, the legendary from Pokémon Sapphire.\nFrom there I thought of his ability *Drizzle*, which I thought was a nice name for my language considering I also love rain, so there you go!\n\n(Also I already had made stickers of the logo so I had to stick with blue and stuff >.>)\n\n## Goals\nThe goals of the project are (in some particular order):\n- Create a language with a nice syntax that I would like to use.\n- Constantly learn ways to improve the language.\n- Learn about the kind of work that goes into developing production grade languages.\n- Eventually get Drizzle to the point where it can interpret / compile itself.\n\n## Project Details\n- Written in Crystal.\n    - Drizzle will work off of Crystal's GC.\n    - If we decide to write the interpreter in Drizzle later, we'll then have to implement out own GC.\n- Parser (will eventually be) generated using [ANTLR](http://www.antlr.org/) for Go and translated into Crystal (like the books I'll be using).\n- Language will initially be interpreted, then will be compiled.\n    - When the compiled version starts, the interpreted version will be archived to a protected branch.\n- When language is mature enough, rewrite the interpreter, and later the compiler, in Drizzle.\n\n## Extensions\nSome basic extensions that I would like to see built in to the language itself;\n- `drizzle docs`: Similar to how crystal generates documentation I would like to have Drizzle being able to parse code and generate doc pages\n- `drizzle fmt`: Similar to tools like `gofmt` or `crystal tool format`, I would like it for Drizzle to have a built-in formatter (once we have a style guide in place)\n- `drizzle deps`: When the language starts to grow, we would need to have some kind of dependency manager built in.\n    - Since the name change to `drizzle`, I'm thinking maybe calling deps `drops`?\n\n## Roadmap\nHere's a basic roadmap for anyone who is interested in what's going on with this project;\n- Write a basic (non-production) version of the interpreter in Crystal, using the [interpreter book](https://interpreterbook.com).\n- Research and learn ANTLR4 and use it to generate a better parser.\n    - ANTLR cannot generate Crystal code so instead I intend to have it generate Go code and translate it, like I am doing with the book.\n- Once the [compiler book](https://compilerbook.com) is released, go through that and turn Drizzle into a compiled language.\n- Get Drizzle to the point where it can replace it's Crystal interpreter.\n- Get Drizzle to the point where it can replace it's Crystal compiler.\n- Start trying to add on the extra Drizzle tools.\n- Keep improving stuff.\n\n## Contributing\nThis project is open to anyone who wants to learn anything about creating programming languages!\n\nA goal for early stages is to keep documentation at a high enough quality that it will hopefully be easy to follow what's going on, but if not then please open an issue!\n\n### Contributors\n- [crnbrdrck](https://github.com/crnbrdrck): creator, designer, maintainer\n","program":{"html_id":"github.com/drizzle-lang/drizzle/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/drizzle-lang/drizzle","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/drizzle-lang/drizzle/Drizzle","path":"Drizzle.html","kind":"module","full_name":"Drizzle","name":"Drizzle","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"drizzle/token.cr","line_number":1,"url":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr"},{"filename":"drizzle/lexer.cr","line_number":3,"url":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/lexer.cr"},{"filename":"drizzle/repl.cr","line_number":1,"url":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/repl.cr"},{"filename":"drizzle/version.cr","line_number":1,"url":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/version.cr"},{"filename":"drizzle.cr","line_number":11,"url":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle.cr"}],"repository_name":"github.com/drizzle-lang/drizzle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.0\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Drizzle is a (currently interpreted, eventually compiled) programming language that tries to strike a balance between readability and type safety, with a bit of speed thrown into the mix.\n\nPlease bear in mind that these docs are generated by running `crystal docs` on the source of the interpreter / compiler.\nAs a result, these docs are intended for the people who wish to contribute to the implemenation of the language.\n\nFor usage documentation, please see [here](https://drizzle-lang.github.io/) instead.","summary":"<p>Drizzle is a (currently interpreted, eventually compiled) programming language that tries to strike a balance between readability and type safety, with a bit of speed thrown into the mix.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/Lexer","path":"Drizzle/Lexer.html","kind":"class","full_name":"Drizzle::Lexer","name":"Lexer","abstract":false,"superclass":{"html_id":"github.com/drizzle-lang/drizzle/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/drizzle-lang/drizzle/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/drizzle-lang/drizzle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"drizzle/lexer.cr","line_number":7,"url":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/lexer.cr"}],"repository_name":"github.com/drizzle-lang/drizzle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle","kind":"module","full_name":"Drizzle","name":"Drizzle"},"doc":"The Lexer is the class in charge of reading in input from a file and converting the text into tokens.\n\nIt works similarly to a Python generator, with the `#get_next_token` method generating the next token from the source file.","summary":"<p>The Lexer is the class in charge of reading in input from a file and converting the text into tokens.</p>","class_methods":[],"constructors":[{"id":"new(input:String)-class-method","html_id":"new(input:String)-class-method","name":"new","doc":"Create a Lexer instance using a String.\nThis string will be split on newline characters and turned into an array of lines, as if it had come from a File.\n\nSince this should only be called from the REPL, the file_name will be \"<stdin>\".","summary":"<p>Create a Lexer instance using a String.</p>","abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"String"}],"args_string":"(input : String)","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/lexer.cr#L20","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/lexer.cr#L20","def":{"name":"new","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(input)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(file:File)-class-method","html_id":"new(file:File)-class-method","name":"new","doc":"Create a Lexer instance using a File instance.\n\nThis will replace the filename and load the lines in to use as input.","summary":"<p>Create a Lexer instance using a File instance.</p>","abstract":false,"args":[{"name":"file","doc":null,"default_value":"","external_name":"file","restriction":"File"}],"args_string":"(file : File)","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/lexer.cr#L31","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/lexer.cr#L31","def":{"name":"new","args":[{"name":"file","doc":null,"default_value":"","external_name":"file","restriction":"File"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(file)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"get_next_token:Token-instance-method","html_id":"get_next_token:Token-instance-method","name":"get_next_token","doc":"Generate the next Token instance from the given input.\n\nThis method first tries the current_char of the Lexer against all of the single character Tokens in Drizzle.\nIf it does not match, it then attempts to build up identifiers / keywords or numbers, depending on what the character is.","summary":"<p>Generate the next Token instance from the given input.</p>","abstract":false,"args":[],"args_string":" : Token","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/lexer.cr#L84","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/lexer.cr#L84","def":{"name":"get_next_token","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Token","visibility":"Public","body":"self.skip_whitespace\nif @current_char == '#'\n  self.skip_comment\nend\ncurrent_line = @line_num + 1\ncurrent_char = @char_num + 1\ntoken_type : TokenType\nliteral : String\nno_read = false\ncase @current_char\nwhen '='\n  if self.peek_next_char == '='\n    token_type = TokenType::EQ\n    literal = \"==\"\n    self.read_next_char\n  else\n    token_type = TokenType::ASSIGN\n    literal = \"=\"\n  end\nwhen '+'\n  token_type = TokenType::PLUS\n  literal = \"+\"\nwhen '-'\n  if self.peek_next_char == '>'\n    token_type = TokenType::RETURN_TYPE\n    literal = \"->\"\n    self.read_next_char\n  else\n    token_type = TokenType::MINUS\n    literal = \"-\"\n  end\nwhen '*'\n  token_type = TokenType::ASTERISK\n  literal = \"*\"\nwhen '/'\n  token_type = TokenType::SLASH\n  literal = \"/\"\nwhen '<'\n  if self.peek_next_char == '='\n    token_type = TokenType::LT_EQ\n    literal = \"<=\"\n    self.read_next_char\n  else\n    token_type = TokenType::LT\n    literal = \"<\"\n  end\nwhen '>'\n  if self.peek_next_char == '='\n    token_type = TokenType::GT_EQ\n    literal = \">=\"\n    self.read_next_char\n  else\n    token_type = TokenType::GT\n    literal = \">\"\n  end\nwhen ','\n  token_type = TokenType::COMMA\n  literal = \",\"\nwhen ':'\n  token_type = TokenType::COLON\n  literal = \":\"\nwhen '('\n  token_type = TokenType::LEFT_PAREN\n  literal = \"(\"\nwhen ')'\n  token_type = TokenType::RIGHT_PAREN\n  literal = \")\"\nwhen '{'\n  token_type = TokenType::LEFT_BRACE\n  literal = \"{\"\nwhen '}'\n  token_type = TokenType::RIGHT_BRACE\n  literal = \"}\"\nwhen '!'\n  if self.peek_next_char == '='\n    token_type = TokenType::NOT_EQ\n    literal = \"!=\"\n    self.read_next_char\n  else\n    token_type = TokenType::ILLEGAL\n    literal = Char::ZERO.to_s\n  end\nwhen Char::ZERO\n  token_type = TokenType::EOF\n  literal = Char::ZERO.to_s\nelse\n  if @current_char.letter?\n    literal = self.read_identifier\n    token_type = Drizzle::Keywords.fetch(literal, TokenType::IDENTIFIER)\n    no_read = true\n  else\n    if @current_char.number?\n      literal = self.read_number\n      token_type = TokenType::INTEGER\n      no_read = true\n    else\n      token_type = TokenType::ILLEGAL\n      literal = Char::ZERO.to_s\n    end\n  end\nend\nif no_read\nelse\n  self.read_next_char\nend\nreturn Token.new(token_type, literal, @file_name, current_line, current_char)\n"}},{"id":"peek_next_char:Char-instance-method","html_id":"peek_next_char:Char-instance-method","name":"peek_next_char","doc":"Check what the next character on the current line is, without updating all the pointers","summary":"<p>Check what the next character on the current line is, without updating all the pointers</p>","abstract":false,"args":[],"args_string":" : Char","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/lexer.cr#L72","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/lexer.cr#L72","def":{"name":"peek_next_char","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Char","visibility":"Public","body":"if @read_char_num >= @current_line.size\n  return Char::ZERO\nelse\n  return @current_line[@read_char_num]\nend"}},{"id":"read_identifier:String-instance-method","html_id":"read_identifier:String-instance-method","name":"read_identifier","doc":"Builds up a possible identifier from the source.\n\nThis method is run whenever `#get_next_token` comes across a letter in the input.","summary":"<p>Builds up a possible identifier from the source.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/lexer.cr#L207","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/lexer.cr#L207","def":{"name":"read_identifier","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"start_pos = @char_num\nline_num = @line_num\nend_pos = @char_num\nwhile (line_num == @line_num) && (self.valid_identifier_char?(@current_char))\n  self.read_next_char\n  end_pos = end_pos + 1\nend\nreturn @lines[line_num][start_pos...end_pos]\n"}},{"id":"read_next_char-instance-method","html_id":"read_next_char-instance-method","name":"read_next_char","doc":"Update the `char_num` and `read_char_num` pointers, as well as the `current_line` and `current_char` values.\nIf the end of the current line has been reached, move to the next line (if exists).\nIf the end of the input has been reached, set the current char to be the `Char::ZERO`.","summary":"<p>Update the <code>char_num</code> and <code>read_char_num</code> pointers, as well as the <code>current_line</code> and <code>current_char</code> values.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/lexer.cr#L44","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/lexer.cr#L44","def":{"name":"read_next_char","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @read_char_num >= @current_line.size\n  @line_num = @line_num + 1\n  @char_num = 0\n  @read_char_num = 0\n  if @line_num >= @lines.size\n    @current_line = Char::ZERO.to_s\n    @current_char = Char::ZERO\n  else\n    @current_line = @lines[@line_num]\n    @current_char = '\\n'\n  end\nelse\n  @current_char = @current_line[@read_char_num]\n  @char_num = @read_char_num\n  @read_char_num = @read_char_num + 1\nend"}},{"id":"read_number:String-instance-method","html_id":"read_number:String-instance-method","name":"read_number","doc":"Builds up an integer number from the source code.\n\nThe interpreter book only handles integer numbers when I move to creating an ANTLR parser then Drizzle will have other number types too :D\nThe number is returned as a String still, to keep Token implementation simple","summary":"<p>Builds up an integer number from the source code.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/lexer.cr#L225","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/lexer.cr#L225","def":{"name":"read_number","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"start_pos = @char_num\nline_num = @line_num\nend_pos = @char_num\nwhile (line_num == @line_num) && @current_char.number?\n  self.read_next_char\n  end_pos = end_pos + 1\nend\nreturn @lines[line_num][start_pos...end_pos]\n"}},{"id":"skip_comment-instance-method","html_id":"skip_comment-instance-method","name":"skip_comment","doc":"Once a comment is found in the source, skip the lexer to the next line.\n\nIn Drizzle, there are currently only single line comments, so we can just skip the line.","summary":"<p>Once a comment is found in the source, skip the lexer to the next line.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/lexer.cr#L252","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/lexer.cr#L252","def":{"name":"skip_comment","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@read_char_num = @current_line.size\nself.read_next_char\nself.skip_whitespace\n"}},{"id":"skip_whitespace-instance-method","html_id":"skip_whitespace-instance-method","name":"skip_whitespace","doc":"Skip whitespace characters in the input as it is unnecessary to turn them into Tokens for Drizzle\n\nWhitespace characters include spaces, newlines, tabs, carriage returns, etc.","summary":"<p>Skip whitespace characters in the input as it is unnecessary to turn them into Tokens for Drizzle</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/lexer.cr#L242","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/lexer.cr#L242","def":{"name":"skip_whitespace","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"whitespace_chars = [' ', '\\n', '\\r', '\\t']\nwhile whitespace_chars.includes?(@current_char)\n  self.read_next_char\nend\n"}},{"id":"valid_identifier_char?(char:Char):Bool-instance-method","html_id":"valid_identifier_char?(char:Char):Bool-instance-method","name":"valid_identifier_char?","doc":"Determine whether a given character is allowed to be used as part of an identifier name.\n\nSince the `#read_identifier` method is only run when the `#get_next_token` finds a letter, we can safely allow numbers in this as well.","summary":"<p>Determine whether a given character is allowed to be used as part of an identifier name.</p>","abstract":false,"args":[{"name":"char","doc":null,"default_value":"","external_name":"char","restriction":"Char"}],"args_string":"(char : Char) : Bool","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/lexer.cr#L263","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/lexer.cr#L263","def":{"name":"valid_identifier_char?","args":[{"name":"char","doc":null,"default_value":"","external_name":"char","restriction":"Char"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"extra_chars = ['?', '!', '_']\nreturn char.alphanumeric? || (extra_chars.includes?(char))\n"}}],"macros":[],"types":[]},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/REPL","path":"Drizzle/REPL.html","kind":"class","full_name":"Drizzle::REPL","name":"REPL","abstract":false,"superclass":{"html_id":"github.com/drizzle-lang/drizzle/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/drizzle-lang/drizzle/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/drizzle-lang/drizzle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"drizzle/repl.cr","line_number":5,"url":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/repl.cr"}],"repository_name":"github.com/drizzle-lang/drizzle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle","kind":"module","full_name":"Drizzle","name":"Drizzle"},"doc":"Class for handling the Read-Eval-Print-Loop (REPL) environment for Drizzle.\n\nCurrently, since we can't exactly 'Eval' yet, the REPL environment simply lexes and prints out the tokens that were created.","summary":"<p>Class for handling the Read-Eval-Print-Loop (REPL) environment for Drizzle.</p>","class_methods":[],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":"Start the REPL environment.\n\nREPL ends on an empty input.","summary":"<p>Start the REPL environment.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/repl.cr#L11","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/repl.cr#L11","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/Token","path":"Drizzle/Token.html","kind":"class","full_name":"Drizzle::Token","name":"Token","abstract":false,"superclass":{"html_id":"github.com/drizzle-lang/drizzle/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/drizzle-lang/drizzle/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/drizzle-lang/drizzle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"drizzle/token.cr","line_number":90,"url":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr"}],"repository_name":"github.com/drizzle-lang/drizzle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"Keywords","name":"Keywords","value":"{\"let\" => TokenType::LET, \"def\" => TokenType::FUNCTION, \"return\" => TokenType::RETURN, \"if\" => TokenType::IF, \"elsif\" => TokenType::ELSIF, \"else\" => TokenType::ELSE, \"not\" => TokenType::NOT, \"true\" => TokenType::TRUE, \"false\" => TokenType::FALSE}","doc":"Hash of all keywords in Drizzle to their corresponding TokenTypes.\n\nUsed as part of the `Lexer`'s process of generating a new Token in order to determine whether a read string of characters is a keyword or not.","summary":"<p>Hash of all keywords in Drizzle to their corresponding TokenTypes.</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle","kind":"module","full_name":"Drizzle","name":"Drizzle"},"doc":"A Token is generated by the `Lexer` as it reads in Drizzle source code.\n\nTokens are then used to generate an Abstract Syntax Tree (AST) which can then be used to actually make the language do things.","summary":"<p>A Token is generated by the <code><a href=\"../Drizzle/Lexer.html\">Lexer</a></code> as it reads in Drizzle source code.</p>","class_methods":[],"constructors":[{"id":"new(token_type:TokenType,literal:String,file_name:String=&quot;&lt;stdin&gt;&quot;,line_num:Int32=0,char_num:Int32=0)-class-method","html_id":"new(token_type:TokenType,literal:String,file_name:String=&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;,line_num:Int32=0,char_num:Int32=0)-class-method","name":"new","doc":"Create an instance of a Token.","summary":"<p>Create an instance of a Token.</p>","abstract":false,"args":[{"name":"token_type","doc":null,"default_value":"","external_name":"token_type","restriction":"TokenType"},{"name":"literal","doc":null,"default_value":"","external_name":"literal","restriction":"String"},{"name":"file_name","doc":null,"default_value":"\"<stdin>\"","external_name":"file_name","restriction":"String"},{"name":"line_num","doc":null,"default_value":"0","external_name":"line_num","restriction":"Int32"},{"name":"char_num","doc":null,"default_value":"0","external_name":"char_num","restriction":"Int32"}],"args_string":"(token_type : TokenType, literal : String, file_name : String = <span class=\"s\">&quot;&lt;stdin&gt;&quot;</span>, line_num : Int32 = <span class=\"n\">0</span>, char_num : Int32 = <span class=\"n\">0</span>)","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L114","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L114","def":{"name":"new","args":[{"name":"token_type","doc":null,"default_value":"","external_name":"token_type","restriction":"TokenType"},{"name":"literal","doc":null,"default_value":"","external_name":"literal","restriction":"String"},{"name":"file_name","doc":null,"default_value":"\"<stdin>\"","external_name":"file_name","restriction":"String"},{"name":"line_num","doc":null,"default_value":"0","external_name":"line_num","restriction":"Int32"},{"name":"char_num","doc":null,"default_value":"0","external_name":"char_num","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(token_type, literal, file_name, line_num, char_num)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"char_num:Int32-instance-method","html_id":"char_num:Int32-instance-method","name":"char_num","doc":"The number of the initial character in the string that generated this Token","summary":"<p>The number of the initial character in the string that generated this Token</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L131","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L131","def":{"name":"char_num","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@char_num"}},{"id":"file_name:String-instance-method","html_id":"file_name:String-instance-method","name":"file_name","doc":"The name of the file this Token was generated from","summary":"<p>The name of the file this Token was generated from</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L127","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L127","def":{"name":"file_name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@file_name"}},{"id":"line_num:Int32-instance-method","html_id":"line_num:Int32-instance-method","name":"line_num","doc":"The number of the line in the file that this Token was generated from","summary":"<p>The number of the line in the file that this Token was generated from</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L129","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L129","def":{"name":"line_num","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@line_num"}},{"id":"literal:String-instance-method","html_id":"literal:String-instance-method","name":"literal","doc":"The literal value that was used to generate this Token instance","summary":"<p>The literal value that was used to generate this Token instance</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L125","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L125","def":{"name":"literal","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@literal"}},{"id":"to_s:String-instance-method","html_id":"to_s:String-instance-method","name":"to_s","doc":"Convert the Token instance into a String representation.","summary":"<p>Convert the Token instance into a String representation.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L118","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L118","def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"return \"Token(#{@token_type}, #{@literal}) from #{@file_name}, line #{@line_num}, char #{@char_num}\""}},{"id":"token_type:Drizzle::TokenType-instance-method","html_id":"token_type:Drizzle::TokenType-instance-method","name":"token_type","doc":"The `TokenType` that represents the type of this Token instance","summary":"<p>The <code><a href=\"../Drizzle/TokenType.html\">TokenType</a></code> that represents the type of this Token instance</p>","abstract":false,"args":[],"args_string":" : Drizzle::TokenType","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L123","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L123","def":{"name":"token_type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@token_type"}}],"macros":[],"types":[]},{"html_id":"github.com/drizzle-lang/drizzle/Drizzle/TokenType","path":"Drizzle/TokenType.html","kind":"enum","full_name":"Drizzle::TokenType","name":"TokenType","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/drizzle-lang/drizzle/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"github.com/drizzle-lang/drizzle/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/drizzle-lang/drizzle/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/drizzle-lang/drizzle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"drizzle/token.cr","line_number":4,"url":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr"}],"repository_name":"github.com/drizzle-lang/drizzle","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"ILLEGAL","name":"ILLEGAL","value":"0","doc":"Token is generated from a string that Drizzle does not recognise","summary":"<p>Token is generated from a string that Drizzle does not recognise</p>"},{"id":"EOF","name":"EOF","value":"1","doc":"End of file token","summary":"<p>End of file token</p>"},{"id":"IDENTIFIER","name":"IDENTIFIER","value":"2","doc":"Name of variable, function, type, etc","summary":"<p>Name of variable, function, type, etc</p>"},{"id":"INTEGER","name":"INTEGER","value":"3","doc":"Integer literal","summary":"<p>Integer literal</p>"},{"id":"ASSIGN","name":"ASSIGN","value":"4","doc":"Assignment operator for assigning value to a variable","summary":"<p>Assignment operator for assigning value to a variable</p>"},{"id":"RETURN_TYPE","name":"RETURN_TYPE","value":"5","doc":"Return type operator for specifying a functions return type","summary":"<p>Return type operator for specifying a functions return type</p>"},{"id":"PLUS","name":"PLUS","value":"6","doc":"Addition operator for adding two values together","summary":"<p>Addition operator for adding two values together</p>"},{"id":"MINUS","name":"MINUS","value":"7","doc":"Subtraction operator for subtracting numbers.\nAlso the unary negation operator.","summary":"<p>Subtraction operator for subtracting numbers.</p>"},{"id":"ASTERISK","name":"ASTERISK","value":"8","doc":"Star operator used for multiplication, among other potential stuff later on too","summary":"<p>Star operator used for multiplication, among other potential stuff later on too</p>"},{"id":"SLASH","name":"SLASH","value":"9","doc":"Slash operator used for division","summary":"<p>Slash operator used for division</p>"},{"id":"LT","name":"LT","value":"10","doc":"Less than logical operator","summary":"<p>Less than logical operator</p>"},{"id":"GT","name":"GT","value":"11","doc":"Greater than logical operator","summary":"<p>Greater than logical operator</p>"},{"id":"EQ","name":"EQ","value":"12","doc":"Equality logical operator","summary":"<p>Equality logical operator</p>"},{"id":"NOT_EQ","name":"NOT_EQ","value":"13","doc":"Inequality logical operator","summary":"<p>Inequality logical operator</p>"},{"id":"LT_EQ","name":"LT_EQ","value":"14","doc":"Less than or equal to","summary":"<p>Less than or equal to</p>"},{"id":"GT_EQ","name":"GT_EQ","value":"15","doc":"Greater than or equal to","summary":"<p>Greater than or equal to</p>"},{"id":"COMMA","name":"COMMA","value":"16","doc":"Separating of items in a data structure / parameter list / etc.","summary":"<p>Separating of items in a data structure / parameter list / etc.</p>"},{"id":"COLON","name":"COLON","value":"17","doc":"Separating of identifier from type in the case of variables and parameters","summary":"<p>Separating of identifier from type in the case of variables and parameters</p>"},{"id":"LEFT_PAREN","name":"LEFT_PAREN","value":"18","doc":"Opening of parameter lists and tuples, and of general brackets","summary":"<p>Opening of parameter lists and tuples, and of general brackets</p>"},{"id":"RIGHT_PAREN","name":"RIGHT_PAREN","value":"19","doc":"Closing of parameter lists and tuples, and of general brackets","summary":"<p>Closing of parameter lists and tuples, and of general brackets</p>"},{"id":"LEFT_BRACE","name":"LEFT_BRACE","value":"20","doc":"Opening of code blocks i.e. functions, as well as opening of set and dict literals","summary":"<p>Opening of code blocks i.e.</p>"},{"id":"RIGHT_BRACE","name":"RIGHT_BRACE","value":"21","doc":"CLosing of code blocks i.e. functions, as well as closing of set and dict literals","summary":"<p>CLosing of code blocks i.e.</p>"},{"id":"LET","name":"LET","value":"22","doc":"Declaration of a variable","summary":"<p>Declaration of a variable</p>"},{"id":"FUNCTION","name":"FUNCTION","value":"23","doc":"Definition of a function","summary":"<p>Definition of a function</p>"},{"id":"RETURN","name":"RETURN","value":"24","doc":"Return value from a function","summary":"<p>Return value from a function</p>"},{"id":"IF","name":"IF","value":"25","doc":"Conditional statement","summary":"<p>Conditional statement</p>"},{"id":"ELSIF","name":"ELSIF","value":"26","doc":"Elsif","summary":"<p>Elsif</p>"},{"id":"ELSE","name":"ELSE","value":"27","doc":"Else","summary":"<p>Else</p>"},{"id":"NOT","name":"NOT","value":"28","doc":"Logical negation","summary":"<p>Logical negation</p>"},{"id":"TRUE","name":"TRUE","value":"29","doc":"True","summary":"<p>True</p>"},{"id":"FALSE","name":"FALSE","value":"30","doc":"False","summary":"<p>False</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/drizzle-lang/drizzle/Drizzle","kind":"module","full_name":"Drizzle","name":"Drizzle"},"doc":"Enum of the various types of Tokens in the Drizzle language.\nThis enum is used for the creation of `Token` instances, and will use its helper methods to help in the parsing stages also.","summary":"<p>Enum of the various types of Tokens in the Drizzle language.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"assign?-instance-method","html_id":"assign?-instance-method","name":"assign?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L22","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L22","def":{"name":"assign?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == ASSIGN"}},{"id":"asterisk?-instance-method","html_id":"asterisk?-instance-method","name":"asterisk?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L31","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L31","def":{"name":"asterisk?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == ASTERISK"}},{"id":"colon?-instance-method","html_id":"colon?-instance-method","name":"colon?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L55","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L55","def":{"name":"colon?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == COLON"}},{"id":"comma?-instance-method","html_id":"comma?-instance-method","name":"comma?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L53","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L53","def":{"name":"comma?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == COMMA"}},{"id":"else?-instance-method","html_id":"else?-instance-method","name":"else?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L78","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L78","def":{"name":"else?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == ELSE"}},{"id":"elsif?-instance-method","html_id":"elsif?-instance-method","name":"elsif?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L76","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L76","def":{"name":"elsif?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == ELSIF"}},{"id":"eof?-instance-method","html_id":"eof?-instance-method","name":"eof?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L10","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L10","def":{"name":"eof?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == EOF"}},{"id":"eq?-instance-method","html_id":"eq?-instance-method","name":"eq?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L42","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L42","def":{"name":"eq?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == EQ"}},{"id":"false?-instance-method","html_id":"false?-instance-method","name":"false?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L84","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L84","def":{"name":"false?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == FALSE"}},{"id":"function?-instance-method","html_id":"function?-instance-method","name":"function?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L70","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L70","def":{"name":"function?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == FUNCTION"}},{"id":"gt?-instance-method","html_id":"gt?-instance-method","name":"gt?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L40","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L40","def":{"name":"gt?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == GT"}},{"id":"gt_eq?-instance-method","html_id":"gt_eq?-instance-method","name":"gt_eq?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L48","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L48","def":{"name":"gt_eq?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == GT_EQ"}},{"id":"identifier?-instance-method","html_id":"identifier?-instance-method","name":"identifier?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L15","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L15","def":{"name":"identifier?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == IDENTIFIER"}},{"id":"if?-instance-method","html_id":"if?-instance-method","name":"if?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L74","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L74","def":{"name":"if?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == IF"}},{"id":"illegal?-instance-method","html_id":"illegal?-instance-method","name":"illegal?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L8","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L8","def":{"name":"illegal?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == ILLEGAL"}},{"id":"integer?-instance-method","html_id":"integer?-instance-method","name":"integer?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L17","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L17","def":{"name":"integer?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == INTEGER"}},{"id":"left_brace?-instance-method","html_id":"left_brace?-instance-method","name":"left_brace?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L61","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L61","def":{"name":"left_brace?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == LEFT_BRACE"}},{"id":"left_paren?-instance-method","html_id":"left_paren?-instance-method","name":"left_paren?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L57","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L57","def":{"name":"left_paren?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == LEFT_PAREN"}},{"id":"let?-instance-method","html_id":"let?-instance-method","name":"let?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L68","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L68","def":{"name":"let?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == LET"}},{"id":"lt?-instance-method","html_id":"lt?-instance-method","name":"lt?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L38","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L38","def":{"name":"lt?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == LT"}},{"id":"lt_eq?-instance-method","html_id":"lt_eq?-instance-method","name":"lt_eq?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L46","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L46","def":{"name":"lt_eq?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == LT_EQ"}},{"id":"minus?-instance-method","html_id":"minus?-instance-method","name":"minus?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L29","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L29","def":{"name":"minus?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == MINUS"}},{"id":"not?-instance-method","html_id":"not?-instance-method","name":"not?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L80","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L80","def":{"name":"not?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == NOT"}},{"id":"not_eq?-instance-method","html_id":"not_eq?-instance-method","name":"not_eq?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L44","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L44","def":{"name":"not_eq?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == NOT_EQ"}},{"id":"plus?-instance-method","html_id":"plus?-instance-method","name":"plus?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L26","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L26","def":{"name":"plus?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == PLUS"}},{"id":"return?-instance-method","html_id":"return?-instance-method","name":"return?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L72","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L72","def":{"name":"return?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == RETURN"}},{"id":"return_type?-instance-method","html_id":"return_type?-instance-method","name":"return_type?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L24","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L24","def":{"name":"return_type?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == RETURN_TYPE"}},{"id":"right_brace?-instance-method","html_id":"right_brace?-instance-method","name":"right_brace?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L63","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L63","def":{"name":"right_brace?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == RIGHT_BRACE"}},{"id":"right_paren?-instance-method","html_id":"right_paren?-instance-method","name":"right_paren?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L59","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L59","def":{"name":"right_paren?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == RIGHT_PAREN"}},{"id":"slash?-instance-method","html_id":"slash?-instance-method","name":"slash?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L33","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L33","def":{"name":"slash?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == SLASH"}},{"id":"true?-instance-method","html_id":"true?-instance-method","name":"true?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L82","source_link":"https://github.com/drizzle-lang/drizzle/blob/d0ddc1aa5b1b787f924330bbb3a388f5d2638bfe/src/drizzle/token.cr#L82","def":{"name":"true?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == TRUE"}}],"macros":[],"types":[]}]}]}})